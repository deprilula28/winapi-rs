RIDL!{#[uuid(0xc4fec28f, 0x7966, 0x4e95, 0x9f, 0x94, 0xf4, 0x31, 0xcb, 0x56, 0xc3, 0xb8)]
interface ID3D12Object(ID3D12ObjectVtbl): IUnknown(IUnknownVtbl) {
    fn GetPrivateData(
        guid: *mut GUID,
        pDataSize: *mut UINT,
        pData: *mut c_void,
    ) -> HRESULT,
    fn SetPrivateData(
        guid: *mut GUID,
        DataSize: UINT,
        pData: *mut c_void,
    ) -> HRESULT,
    fn SetPrivateDataInterface(
        guid: *mut GUID,
        pData: LPUNKNOWN,
    ) -> HRESULT,
    fn SetName(
        Name: LPCWSTR,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x905db94b, 0xa00c, 0x4140, 0x9d, 0xf5, 0x2b, 0x64, 0xca, 0x9e, 0xa3, 0x57)]
interface ID3D12DeviceChild(ID3D12DeviceChildVtbl): ID3D12Object(ID3D12ObjectVtbl) {
    fn GetDevice(
        riid: *const GUID,
        ppvDevice: *mut *mut c_void,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x63ee58fb, 0x1268, 0x4835, 0x86, 0xda, 0xf0, 0x08, 0xce, 0x62, 0xf0, 0xd6)]
interface ID3D12Pageable(ID3D12PageableVtbl): ID3D12DeviceChild(ID3D12DeviceChildVtbl) {
}}

RIDL!{#[uuid(0x0ec870a6, 0x5d7e, 0x4c22, 0x8c, 0xfc, 0x5b, 0xaa, 0xe0, 0x76, 0x16, 0xed)]
interface ID3D12CommandQueue(ID3D12CommandQueueVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn UpdateTileMappings(
        pResource: *mut ID3D12Resource,
        NumResourceRegions: UINT,
        pResourceRegionStartCoordinates: *mut D3D12_TILED_RESOURCE_COORDINATE,
        pResourceRegionSizes: *mut D3D12_TILE_REGION_SIZE,
        pHeap: *mut ID3D12Heap,
        NumRanges: UINT,
        pRangeFlags: *mut D3D12_TILE_RANGE_FLAGS,
        pHeapRangeStartOffsets: *mut UINT,
        pRangeTileCounts: *mut UINT,
        Flags: D3D12_TILE_MAPPING_FLAGS,
    ) -> c_void,
    fn CopyTileMappings(
        pDstResource: *mut ID3D12Resource,
        pDstRegionStartCoordinate: *mut D3D12_TILED_RESOURCE_COORDINATE,
        pSrcResource: *mut ID3D12Resource,
        pSrcRegionStartCoordinate: *mut D3D12_TILED_RESOURCE_COORDINATE,
        pRegionSize: *mut D3D12_TILE_REGION_SIZE,
        Flags: D3D12_TILE_MAPPING_FLAGS,
    ) -> c_void,
    fn ExecuteCommandLists(
        NumCommandLists: UINT,
        ppCommandLists: *mut *mut ID3D12CommandList,
    ) -> c_void,
    fn SetMarker(
        Metadata: UINT,
        pData: *mut c_void,
        Size: UINT,
    ) -> c_void,
    fn BeginEvent(
        Metadata: UINT,
        pData: *mut c_void,
        Size: UINT,
    ) -> c_void,
    fn EndEvent(
    ) -> c_void,
    fn Signal(
        pFence: *mut ID3D12Fence,
        Value: u64,
    ) -> HRESULT,
    fn Wait(
        pFence: *mut ID3D12Fence,
        Value: u64,
    ) -> HRESULT,
    fn GetTimestampFrequency(
        pFrequency: *mut u64,
    ) -> HRESULT,
    fn GetClockCalibration(
        pGpuTimestamp: *mut u64,
        pCpuTimestamp: *mut u64,
    ) -> HRESULT,
    fn GetDesc(
    ) -> D3D12_COMMAND_QUEUE_DESC,
}}

RIDL!{#[uuid(0x696442be, 0xa72e, 0x4059, 0xbc, 0x79, 0x5b, 0x5c, 0x98, 0x04, 0x0f, 0xad)]
interface ID3D12Resource(ID3D12ResourceVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn Map(
        Subresource: UINT,
        pReadRange: *mut D3D12_RANGE,
        ppData: *mut *mut c_void,
    ) -> HRESULT,
    fn Unmap(
        Subresource: UINT,
        pWrittenRange: *mut D3D12_RANGE,
    ) -> c_void,
    fn GetDesc(
    ) -> D3D12_RESOURCE_DESC,
    fn GetGPUVirtualAddress(
    ) -> u64,
    fn WriteToSubresource(
        DstSubresource: UINT,
        pDstBox: *mut D3D12_BOX,
        pSrcData: *mut c_void,
        SrcRowPitch: UINT,
        SrcDepthPitch: UINT,
    ) -> HRESULT,
    fn ReadFromSubresource(
        pDstData: *mut c_void,
        DstRowPitch: UINT,
        DstDepthPitch: UINT,
        SrcSubresource: UINT,
        pSrcBox: *mut D3D12_BOX,
    ) -> HRESULT,
    fn GetHeapProperties(
        pHeapProperties: *mut D3D12_HEAP_PROPERTIES,
        pHeapFlags: *mut D3D12_HEAP_FLAGS,
    ) -> HRESULT,
}}

STRUCT!{struct D3D12_RANGE {
    Begin: ULONG_PTR,
    End: ULONG_PTR,
}}

pub type ULONG_PTR = u64;

STRUCT!{struct D3D12_RESOURCE_DESC {
    Dimension: D3D12_RESOURCE_DIMENSION,
    Alignment: u64,
    Width: u64,
    Height: UINT,
    DepthOrArraySize: u16,
    MipLevels: u16,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    Layout: D3D12_TEXTURE_LAYOUT,
    Flags: D3D12_RESOURCE_FLAGS,
}}

ENUM!{enum D3D12_RESOURCE_DIMENSION {
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4,
}}

ENUM!{enum DXGI_FORMAT {
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_AYUV = 100,
    DXGI_FORMAT_Y410 = 101,
    DXGI_FORMAT_Y416 = 102,
    DXGI_FORMAT_NV12 = 103,
    DXGI_FORMAT_P010 = 104,
    DXGI_FORMAT_P016 = 105,
    DXGI_FORMAT_420_OPAQUE = 106,
    DXGI_FORMAT_YUY2 = 107,
    DXGI_FORMAT_Y210 = 108,
    DXGI_FORMAT_Y216 = 109,
    DXGI_FORMAT_NV11 = 110,
    DXGI_FORMAT_AI44 = 111,
    DXGI_FORMAT_IA44 = 112,
    DXGI_FORMAT_P8 = 113,
    DXGI_FORMAT_A8P8 = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM = 115,
    DXGI_FORMAT_P208 = 130,
    DXGI_FORMAT_V208 = 131,
    DXGI_FORMAT_V408 = 132,
    DXGI_FORMAT_FORCE_UINT = 0xffffffff,
}}

STRUCT!{struct DXGI_SAMPLE_DESC {
    Count: UINT,
    Quality: UINT,
}}

ENUM!{enum D3D12_TEXTURE_LAYOUT {
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3,
}}

ENUM!{enum D3D12_RESOURCE_FLAGS {
    D3D12_RESOURCE_FLAG_NONE = 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32,
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64,
}}

STRUCT!{struct D3D12_BOX {
    left: UINT,
    top: UINT,
    front: UINT,
    right: UINT,
    bottom: UINT,
    back: UINT,
}}

STRUCT!{struct D3D12_HEAP_PROPERTIES {
    Type: D3D12_HEAP_TYPE,
    CPUPageProperty: D3D12_CPU_PAGE_PROPERTY,
    MemoryPoolPreference: D3D12_MEMORY_POOL,
    CreationNodeMask: UINT,
    VisibleNodeMask: UINT,
}}

ENUM!{enum D3D12_HEAP_TYPE {
    D3D12_HEAP_TYPE_DEFAULT = 1,
    D3D12_HEAP_TYPE_UPLOAD = 2,
    D3D12_HEAP_TYPE_READBACK = 3,
    D3D12_HEAP_TYPE_CUSTOM = 4,
}}

ENUM!{enum D3D12_CPU_PAGE_PROPERTY {
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3,
}}

ENUM!{enum D3D12_MEMORY_POOL {
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0 = 1,
    D3D12_MEMORY_POOL_L1 = 2,
}}

ENUM!{enum D3D12_HEAP_FLAGS {
    D3D12_HEAP_FLAG_NONE = 0,
    D3D12_HEAP_FLAG_SHARED = 1,
    D3D12_HEAP_FLAG_DENY_BUFFERS = 4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128,
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256,
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512,
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024,
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132,
}}

STRUCT!{struct D3D12_TILED_RESOURCE_COORDINATE {
    X: UINT,
    Y: UINT,
    Z: UINT,
    Subresource: UINT,
}}

STRUCT!{struct D3D12_TILE_REGION_SIZE {
    NumTiles: UINT,
    UseBox: i32,
    Width: UINT,
    Height: u16,
    Depth: u16,
}}

RIDL!{#[uuid(0x6b3b2502, 0x6e51, 0x45b3, 0x90, 0xee, 0x98, 0x84, 0x26, 0x5e, 0x8d, 0xf3)]
interface ID3D12Heap(ID3D12HeapVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn GetDesc(
    ) -> D3D12_HEAP_DESC,
}}

STRUCT!{struct D3D12_HEAP_DESC {
    SizeInBytes: u64,
    Properties: D3D12_HEAP_PROPERTIES,
    Alignment: u64,
    Flags: D3D12_HEAP_FLAGS,
}}

ENUM!{enum D3D12_TILE_RANGE_FLAGS {
    D3D12_TILE_RANGE_FLAG_NONE = 0,
    D3D12_TILE_RANGE_FLAG_NULL = 1,
    D3D12_TILE_RANGE_FLAG_SKIP = 2,
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4,
}}

ENUM!{enum D3D12_TILE_MAPPING_FLAGS {
    D3D12_TILE_MAPPING_FLAG_NONE = 0,
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1,
}}

RIDL!{#[uuid(0x7116d91c, 0xe7e4, 0x47ce, 0xb8, 0xc6, 0xec, 0x81, 0x68, 0xf4, 0x37, 0xe5)]
interface ID3D12CommandList(ID3D12CommandListVtbl): ID3D12DeviceChild(ID3D12DeviceChildVtbl) {
    fn GetType(
    ) -> D3D12_COMMAND_LIST_TYPE,
}}

ENUM!{enum D3D12_COMMAND_LIST_TYPE {
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY = 3,
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5,
}}

RIDL!{#[uuid(0x0a753dcf, 0xc4d8, 0x4b91, 0xad, 0xf6, 0xbe, 0x5a, 0x60, 0xd9, 0x5a, 0x76)]
interface ID3D12Fence(ID3D12FenceVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn GetCompletedValue(
    ) -> u64,
    fn SetEventOnCompletion(
        Value: u64,
        hEvent: *mut c_void,
    ) -> HRESULT,
    fn Signal(
        Value: u64,
    ) -> HRESULT,
}}

STRUCT!{struct D3D12_COMMAND_QUEUE_DESC {
    Type: D3D12_COMMAND_LIST_TYPE,
    Priority: INT,
    Flags: D3D12_COMMAND_QUEUE_FLAGS,
    NodeMask: UINT,
}}

ENUM!{enum D3D12_COMMAND_QUEUE_FLAGS {
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1,
}}

ENUM!{enum D3D12_COMMAND_QUEUE_PRIORITY {
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100,
    D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000,
}}

ENUM!{enum D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4,
}}

ENUM!{enum D3D12_INPUT_CLASSIFICATION {
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1,
}}

STRUCT!{struct D3D12_INPUT_ELEMENT_DESC {
    SemanticName: LPSTR,
    SemanticIndex: UINT,
    Format: DXGI_FORMAT,
    InputSlot: UINT,
    AlignedByteOffset: UINT,
    InputSlotClass: D3D12_INPUT_CLASSIFICATION,
    InstanceDataStepRate: UINT,
}}

ENUM!{enum D3D12_FILL_MODE {
    D3D12_FILL_MODE_WIREFRAME = 2,
    D3D12_FILL_MODE_SOLID = 3,
}}

ENUM!{enum D3D_PRIMITIVE_TOPOLOGY {
    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
    D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
}}

ENUM!{enum D3D_PRIMITIVE {
    D3D_PRIMITIVE_UNDEFINED = 0,
    D3D_PRIMITIVE_POINT = 1,
    D3D_PRIMITIVE_LINE = 2,
    D3D_PRIMITIVE_TRIANGLE = 3,
    D3D_PRIMITIVE_LINE_ADJ = 6,
    D3D_PRIMITIVE_TRIANGLE_ADJ = 7,
    D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
    D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
    D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
    D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
    D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
    D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
    D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
    D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
    D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
    D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
    D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
    D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
    D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
    D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
    D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
    D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
    D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
    D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
    D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
    D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 27,
    D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 28,
    D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 29,
    D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 30,
    D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 31,
    D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 32,
    D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 33,
    D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 34,
    D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 35,
    D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 36,
    D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 37,
    D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 38,
    D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 39,
    D3D10_PRIMITIVE_UNDEFINED = 0,
    D3D10_PRIMITIVE_POINT = 1,
    D3D10_PRIMITIVE_LINE = 2,
    D3D10_PRIMITIVE_TRIANGLE = 3,
    D3D10_PRIMITIVE_LINE_ADJ = 6,
    D3D10_PRIMITIVE_TRIANGLE_ADJ = 7,
    D3D11_PRIMITIVE_UNDEFINED = 0,
    D3D11_PRIMITIVE_POINT = 1,
    D3D11_PRIMITIVE_LINE = 2,
    D3D11_PRIMITIVE_TRIANGLE = 3,
    D3D11_PRIMITIVE_LINE_ADJ = 6,
    D3D11_PRIMITIVE_TRIANGLE_ADJ = 7,
    D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
    D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
    D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
    D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
    D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
    D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
    D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
    D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
    D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
    D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
    D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
    D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
    D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
    D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
    D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
    D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
    D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
    D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
    D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
    D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 27,
    D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 28,
    D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 29,
    D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 30,
    D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 31,
    D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 32,
    D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 33,
    D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 34,
    D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 35,
    D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 36,
    D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 37,
    D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 38,
    D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 39,
}}

ENUM!{enum D3D12_CULL_MODE {
    D3D12_CULL_MODE_NONE = 1,
    D3D12_CULL_MODE_FRONT = 2,
    D3D12_CULL_MODE_BACK = 3,
}}

STRUCT!{struct D3D12_SO_DECLARATION_ENTRY {
    Stream: UINT,
    SemanticName: LPSTR,
    SemanticIndex: UINT,
    StartComponent: u8,
    ComponentCount: u8,
    OutputSlot: u8,
}}

STRUCT!{struct D3D12_VIEWPORT {
    TopLeftX: f32,
    TopLeftY: f32,
    Width: f32,
    Height: f32,
    MinDepth: f32,
    MaxDepth: f32,
}}

STRUCT!{struct tagRECT {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
}}

ENUM!{enum D3D12_COMPARISON_FUNC {
    D3D12_COMPARISON_FUNC_NEVER = 1,
    D3D12_COMPARISON_FUNC_LESS = 2,
    D3D12_COMPARISON_FUNC_EQUAL = 3,
    D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
    D3D12_COMPARISON_FUNC_GREATER = 5,
    D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
    D3D12_COMPARISON_FUNC_ALWAYS = 8,
}}

ENUM!{enum D3D12_DEPTH_WRITE_MASK {
    D3D12_DEPTH_WRITE_MASK_ZERO = 0,
    D3D12_DEPTH_WRITE_MASK_ALL = 1,
}}

ENUM!{enum D3D12_STENCIL_OP {
    D3D12_STENCIL_OP_KEEP = 1,
    D3D12_STENCIL_OP_ZERO = 2,
    D3D12_STENCIL_OP_REPLACE = 3,
    D3D12_STENCIL_OP_INCR_SAT = 4,
    D3D12_STENCIL_OP_DECR_SAT = 5,
    D3D12_STENCIL_OP_INVERT = 6,
    D3D12_STENCIL_OP_INCR = 7,
    D3D12_STENCIL_OP_DECR = 8,
}}

STRUCT!{struct D3D12_DEPTH_STENCILOP_DESC {
    StencilFailOp: D3D12_STENCIL_OP,
    StencilDepthFailOp: D3D12_STENCIL_OP,
    StencilPassOp: D3D12_STENCIL_OP,
    StencilFunc: D3D12_COMPARISON_FUNC,
}}

STRUCT!{struct D3D12_DEPTH_STENCIL_DESC {
    DepthEnable: i32,
    DepthWriteMask: D3D12_DEPTH_WRITE_MASK,
    DepthFunc: D3D12_COMPARISON_FUNC,
    StencilEnable: i32,
    StencilReadMask: u8,
    StencilWriteMask: u8,
    FrontFace: D3D12_DEPTH_STENCILOP_DESC,
    BackFace: D3D12_DEPTH_STENCILOP_DESC,
}}

STRUCT!{struct D3D12_DEPTH_STENCIL_DESC1 {
    DepthEnable: i32,
    DepthWriteMask: D3D12_DEPTH_WRITE_MASK,
    DepthFunc: D3D12_COMPARISON_FUNC,
    StencilEnable: i32,
    StencilReadMask: u8,
    StencilWriteMask: u8,
    FrontFace: D3D12_DEPTH_STENCILOP_DESC,
    BackFace: D3D12_DEPTH_STENCILOP_DESC,
    DepthBoundsTestEnable: i32,
}}

ENUM!{enum D3D12_BLEND {
    D3D12_BLEND_ZERO = 1,
    D3D12_BLEND_ONE = 2,
    D3D12_BLEND_SRC_COLOR = 3,
    D3D12_BLEND_INV_SRC_COLOR = 4,
    D3D12_BLEND_SRC_ALPHA = 5,
    D3D12_BLEND_INV_SRC_ALPHA = 6,
    D3D12_BLEND_DEST_ALPHA = 7,
    D3D12_BLEND_INV_DEST_ALPHA = 8,
    D3D12_BLEND_DEST_COLOR = 9,
    D3D12_BLEND_INV_DEST_COLOR = 10,
    D3D12_BLEND_SRC_ALPHA_SAT = 11,
    D3D12_BLEND_BLEND_FACTOR = 14,
    D3D12_BLEND_INV_BLEND_FACTOR = 15,
    D3D12_BLEND_SRC1_COLOR = 16,
    D3D12_BLEND_INV_SRC1_COLOR = 17,
    D3D12_BLEND_SRC1_ALPHA = 18,
    D3D12_BLEND_INV_SRC1_ALPHA = 19,
}}

ENUM!{enum D3D12_BLEND_OP {
    D3D12_BLEND_OP_ADD = 1,
    D3D12_BLEND_OP_SUBTRACT = 2,
    D3D12_BLEND_OP_REV_SUBTRACT = 3,
    D3D12_BLEND_OP_MIN = 4,
    D3D12_BLEND_OP_MAX = 5,
}}

ENUM!{enum D3D12_COLOR_WRITE_ENABLE {
    D3D12_COLOR_WRITE_ENABLE_RED = 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D12_COLOR_WRITE_ENABLE_ALL = 15,
}}

ENUM!{enum D3D12_LOGIC_OP {
    D3D12_LOGIC_OP_CLEAR = 0,
    D3D12_LOGIC_OP_SET = 1,
    D3D12_LOGIC_OP_COPY = 2,
    D3D12_LOGIC_OP_COPY_INVERTED = 3,
    D3D12_LOGIC_OP_NOOP = 4,
    D3D12_LOGIC_OP_INVERT = 5,
    D3D12_LOGIC_OP_AND = 6,
    D3D12_LOGIC_OP_NAND = 7,
    D3D12_LOGIC_OP_OR = 8,
    D3D12_LOGIC_OP_NOR = 9,
    D3D12_LOGIC_OP_XOR = 10,
    D3D12_LOGIC_OP_EQUIV = 11,
    D3D12_LOGIC_OP_AND_REVERSE = 12,
    D3D12_LOGIC_OP_AND_INVERTED = 13,
    D3D12_LOGIC_OP_OR_REVERSE = 14,
    D3D12_LOGIC_OP_OR_INVERTED = 15,
}}

STRUCT!{struct D3D12_RENDER_TARGET_BLEND_DESC {
    BlendEnable: i32,
    LogicOpEnable: i32,
    SrcBlend: D3D12_BLEND,
    DestBlend: D3D12_BLEND,
    BlendOp: D3D12_BLEND_OP,
    SrcBlendAlpha: D3D12_BLEND,
    DestBlendAlpha: D3D12_BLEND,
    BlendOpAlpha: D3D12_BLEND_OP,
    LogicOp: D3D12_LOGIC_OP,
    RenderTargetWriteMask: u8,
}}

STRUCT!{struct D3D12_BLEND_DESC {
    AlphaToCoverageEnable: i32,
    IndependentBlendEnable: i32,
    RenderTarget: [D3D12_RENDER_TARGET_BLEND_DESC; 8],
}}

ENUM!{enum D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1,
}}

STRUCT!{struct D3D12_RASTERIZER_DESC {
    FillMode: D3D12_FILL_MODE,
    CullMode: D3D12_CULL_MODE,
    FrontCounterClockwise: i32,
    DepthBias: INT,
    DepthBiasClamp: f32,
    SlopeScaledDepthBias: f32,
    DepthClipEnable: i32,
    MultisampleEnable: i32,
    AntialiasedLineEnable: i32,
    ForcedSampleCount: UINT,
    ConservativeRaster: D3D12_CONSERVATIVE_RASTERIZATION_MODE,
}}

RIDL!{#[uuid(0xc54a6b66, 0x72df, 0x4ee8, 0x8b, 0xe5, 0xa9, 0x46, 0xa1, 0x42, 0x92, 0x14)]
interface ID3D12RootSignature(ID3D12RootSignatureVtbl): ID3D12DeviceChild(ID3D12DeviceChildVtbl) {
}}

STRUCT!{struct D3D12_SHADER_BYTECODE {
    pShaderBytecode: *mut c_void,
    BytecodeLength: ULONG_PTR,
}}

STRUCT!{struct D3D12_STREAM_OUTPUT_DESC {
    pSODeclaration: *mut D3D12_SO_DECLARATION_ENTRY,
    NumEntries: UINT,
    pBufferStrides: *mut UINT,
    NumStrides: UINT,
    RasterizedStream: UINT,
}}

STRUCT!{struct D3D12_INPUT_LAYOUT_DESC {
    pInputElementDescs: *mut D3D12_INPUT_ELEMENT_DESC,
    NumElements: UINT,
}}

ENUM!{enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2,
}}

STRUCT!{struct D3D12_CACHED_PIPELINE_STATE {
    pCachedBlob: *mut c_void,
    CachedBlobSizeInBytes: ULONG_PTR,
}}

ENUM!{enum D3D12_PIPELINE_STATE_FLAGS {
    D3D12_PIPELINE_STATE_FLAG_NONE = 0,
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1,
}}

STRUCT!{struct D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    pRootSignature: *mut ID3D12RootSignature,
    VS: D3D12_SHADER_BYTECODE,
    PS: D3D12_SHADER_BYTECODE,
    DS: D3D12_SHADER_BYTECODE,
    HS: D3D12_SHADER_BYTECODE,
    GS: D3D12_SHADER_BYTECODE,
    StreamOutput: D3D12_STREAM_OUTPUT_DESC,
    BlendState: D3D12_BLEND_DESC,
    SampleMask: UINT,
    RasterizerState: D3D12_RASTERIZER_DESC,
    DepthStencilState: D3D12_DEPTH_STENCIL_DESC,
    InputLayout: D3D12_INPUT_LAYOUT_DESC,
    IBStripCutValue: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,
    PrimitiveTopologyType: D3D12_PRIMITIVE_TOPOLOGY_TYPE,
    NumRenderTargets: UINT,
    RTVFormats: [DXGI_FORMAT; 8],
    DSVFormat: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    NodeMask: UINT,
    CachedPSO: D3D12_CACHED_PIPELINE_STATE,
    Flags: D3D12_PIPELINE_STATE_FLAGS,
}}

STRUCT!{struct D3D12_COMPUTE_PIPELINE_STATE_DESC {
    pRootSignature: *mut ID3D12RootSignature,
    CS: D3D12_SHADER_BYTECODE,
    NodeMask: UINT,
    CachedPSO: D3D12_CACHED_PIPELINE_STATE,
    Flags: D3D12_PIPELINE_STATE_FLAGS,
}}

STRUCT!{struct D3D12_RT_FORMAT_ARRAY {
    RTFormats: [DXGI_FORMAT; 8],
    NumRenderTargets: UINT,
}}

STRUCT!{struct D3D12_PIPELINE_STATE_STREAM_DESC {
    SizeInBytes: ULONG_PTR,
    pPipelineStateSubobjectStream: *mut c_void,
}}

ENUM!{enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE {
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 23,
}}

ENUM!{enum D3D12_FEATURE {
    D3D12_FEATURE_D3D12_OPTIONS = 0,
    D3D12_FEATURE_ARCHITECTURE = 1,
    D3D12_FEATURE_FEATURE_LEVELS = 2,
    D3D12_FEATURE_FORMAT_SUPPORT = 3,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
    D3D12_FEATURE_FORMAT_INFO = 5,
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
    D3D12_FEATURE_SHADER_MODEL = 7,
    D3D12_FEATURE_D3D12_OPTIONS1 = 8,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10,
    D3D12_FEATURE_ROOT_SIGNATURE = 12,
    D3D12_FEATURE_ARCHITECTURE1 = 16,
    D3D12_FEATURE_D3D12_OPTIONS2 = 18,
    D3D12_FEATURE_SHADER_CACHE = 19,
    D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20,
    D3D12_FEATURE_D3D12_OPTIONS3 = 21,
    D3D12_FEATURE_EXISTING_HEAPS = 22,
    D3D12_FEATURE_D3D12_OPTIONS4 = 23,
    D3D12_FEATURE_SERIALIZATION = 24,
    D3D12_FEATURE_CROSS_NODE = 25,
    D3D12_FEATURE_D3D12_OPTIONS5 = 27,
}}

ENUM!{enum D3D12_SHADER_MIN_PRECISION_SUPPORT {
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2,
}}

ENUM!{enum D3D12_TILED_RESOURCES_TIER {
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
    D3D12_TILED_RESOURCES_TIER_1 = 1,
    D3D12_TILED_RESOURCES_TIER_2 = 2,
    D3D12_TILED_RESOURCES_TIER_3 = 3,
    D3D12_TILED_RESOURCES_TIER_4 = 4,
}}

ENUM!{enum D3D12_RESOURCE_BINDING_TIER {
    D3D12_RESOURCE_BINDING_TIER_1 = 1,
    D3D12_RESOURCE_BINDING_TIER_2 = 2,
    D3D12_RESOURCE_BINDING_TIER_3 = 3,
}}

ENUM!{enum D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3,
}}

ENUM!{enum D3D12_FORMAT_SUPPORT1 {
    D3D12_FORMAT_SUPPORT1_NONE = 0,
    D3D12_FORMAT_SUPPORT1_BUFFER = 1,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048,
    D3D12_FORMAT_SUPPORT1_MIP = 4096,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384,
    D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144,
    D3D12_FORMAT_SUPPORT1_DISPLAY = 524288,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824,
}}

ENUM!{enum D3D12_FORMAT_SUPPORT2 {
    D3D12_FORMAT_SUPPORT2_NONE = 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256,
    D3D12_FORMAT_SUPPORT2_TILED = 512,
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384,
}}

ENUM!{enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1,
}}

ENUM!{enum D3D12_CROSS_NODE_SHARING_TIER {
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
    D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
    D3D12_CROSS_NODE_SHARING_TIER_2 = 3,
    D3D12_CROSS_NODE_SHARING_TIER_3 = 4,
}}

ENUM!{enum D3D12_RESOURCE_HEAP_TIER {
    D3D12_RESOURCE_HEAP_TIER_1 = 1,
    D3D12_RESOURCE_HEAP_TIER_2 = 2,
}}

ENUM!{enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER {
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0,
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1,
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2,
}}

ENUM!{enum D3D12_VIEW_INSTANCING_TIER {
    D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0,
    D3D12_VIEW_INSTANCING_TIER_1 = 1,
    D3D12_VIEW_INSTANCING_TIER_2 = 2,
    D3D12_VIEW_INSTANCING_TIER_3 = 3,
}}

STRUCT!{struct D3D12_FEATURE_DATA_D3D12_OPTIONS {
    DoublePrecisionFloatShaderOps: i32,
    OutputMergerLogicOp: i32,
    MinPrecisionSupport: D3D12_SHADER_MIN_PRECISION_SUPPORT,
    TiledResourcesTier: D3D12_TILED_RESOURCES_TIER,
    ResourceBindingTier: D3D12_RESOURCE_BINDING_TIER,
    PSSpecifiedStencilRefSupported: i32,
    TypedUAVLoadAdditionalFormats: i32,
    ROVsSupported: i32,
    ConservativeRasterizationTier: D3D12_CONSERVATIVE_RASTERIZATION_TIER,
    MaxGPUVirtualAddressBitsPerResource: UINT,
    StandardSwizzle64KBSupported: i32,
    CrossNodeSharingTier: D3D12_CROSS_NODE_SHARING_TIER,
    CrossAdapterRowMajorTextureSupported: i32,
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: i32,
    ResourceHeapTier: D3D12_RESOURCE_HEAP_TIER,
}}

STRUCT!{struct D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    WaveOps: i32,
    WaveLaneCountMin: UINT,
    WaveLaneCountMax: UINT,
    TotalLaneCount: UINT,
    ExpandedComputeResourceStates: i32,
    Int64ShaderOps: i32,
}}

STRUCT!{struct D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
    DepthBoundsTestSupported: i32,
    ProgrammableSamplePositionsTier: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER,
}}

ENUM!{enum D3D_ROOT_SIGNATURE_VERSION {
    D3D_ROOT_SIGNATURE_VERSION_1 = 1,
    D3D_ROOT_SIGNATURE_VERSION_1_0 = 1,
    D3D_ROOT_SIGNATURE_VERSION_1_1 = 2,
}}

STRUCT!{struct D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    HighestVersion: D3D_ROOT_SIGNATURE_VERSION,
}}

STRUCT!{struct D3D12_FEATURE_DATA_ARCHITECTURE {
    NodeIndex: UINT,
    TileBasedRenderer: i32,
    UMA: i32,
    CacheCoherentUMA: i32,
}}

STRUCT!{struct D3D12_FEATURE_DATA_ARCHITECTURE1 {
    NodeIndex: UINT,
    TileBasedRenderer: i32,
    UMA: i32,
    CacheCoherentUMA: i32,
    IsolatedMMU: i32,
}}

STRUCT!{struct D3D12_FEATURE_DATA_FEATURE_LEVELS {
    NumFeatureLevels: UINT,
    pFeatureLevelsRequested: *mut D3D_FEATURE_LEVEL,
    MaxSupportedFeatureLevel: D3D_FEATURE_LEVEL,
}}

ENUM!{enum D3D_FEATURE_LEVEL {
    D3D_FEATURE_LEVEL_9_1 = 37120,
    D3D_FEATURE_LEVEL_9_2 = 37376,
    D3D_FEATURE_LEVEL_9_3 = 37632,
    D3D_FEATURE_LEVEL_10_0 = 40960,
    D3D_FEATURE_LEVEL_10_1 = 41216,
    D3D_FEATURE_LEVEL_11_0 = 45056,
    D3D_FEATURE_LEVEL_11_1 = 45312,
    D3D_FEATURE_LEVEL_12_0 = 49152,
    D3D_FEATURE_LEVEL_12_1 = 49408,
}}

ENUM!{enum D3D_SHADER_MODEL {
    D3D_SHADER_MODEL_5_1 = 81,
    D3D_SHADER_MODEL_6_0 = 96,
    D3D_SHADER_MODEL_6_1 = 97,
    D3D_SHADER_MODEL_6_2 = 98,
    D3D_SHADER_MODEL_6_3 = 99,
    D3D_SHADER_MODEL_6_4 = 100,
}}

STRUCT!{struct D3D12_FEATURE_DATA_SHADER_MODEL {
    HighestShaderModel: D3D_SHADER_MODEL,
}}

STRUCT!{struct D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    Format: DXGI_FORMAT,
    Support1: D3D12_FORMAT_SUPPORT1,
    Support2: D3D12_FORMAT_SUPPORT2,
}}

STRUCT!{struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    Format: DXGI_FORMAT,
    SampleCount: UINT,
    Flags: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS,
    NumQualityLevels: UINT,
}}

STRUCT!{struct D3D12_FEATURE_DATA_FORMAT_INFO {
    Format: DXGI_FORMAT,
    PlaneCount: u8,
}}

STRUCT!{struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    MaxGPUVirtualAddressBitsPerResource: UINT,
    MaxGPUVirtualAddressBitsPerProcess: UINT,
}}

ENUM!{enum D3D12_SHADER_CACHE_SUPPORT_FLAGS {
    D3D12_SHADER_CACHE_SUPPORT_NONE = 0,
    D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1,
    D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2,
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4,
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8,
}}

STRUCT!{struct D3D12_FEATURE_DATA_SHADER_CACHE {
    SupportFlags: D3D12_SHADER_CACHE_SUPPORT_FLAGS,
}}

STRUCT!{struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
    CommandListType: D3D12_COMMAND_LIST_TYPE,
    Priority: UINT,
    PriorityForTypeIsSupported: i32,
}}

ENUM!{enum D3D12_COMMAND_LIST_SUPPORT_FLAGS {
    D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32,
}}

STRUCT!{struct D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
    CopyQueueTimestampQueriesSupported: i32,
    CastingFullyTypedFormatSupported: i32,
    WriteBufferImmediateSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS,
    ViewInstancingTier: D3D12_VIEW_INSTANCING_TIER,
    BarycentricsSupported: i32,
}}

STRUCT!{struct D3D12_FEATURE_DATA_EXISTING_HEAPS {
    Supported: i32,
}}

ENUM!{enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER {
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0,
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1,
}}

STRUCT!{struct D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
    MSAA64KBAlignedTextureSupported: i32,
    SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER,
    Native16BitShaderOpsSupported: i32,
}}

ENUM!{enum D3D12_HEAP_SERIALIZATION_TIER {
    D3D12_HEAP_SERIALIZATION_TIER_0 = 0,
    D3D12_HEAP_SERIALIZATION_TIER_10 = 10,
}}

STRUCT!{struct D3D12_FEATURE_DATA_SERIALIZATION {
    NodeIndex: UINT,
    HeapSerializationTier: D3D12_HEAP_SERIALIZATION_TIER,
}}

STRUCT!{struct D3D12_FEATURE_DATA_CROSS_NODE {
    SharingTier: D3D12_CROSS_NODE_SHARING_TIER,
    AtomicShaderInstructions: i32,
}}

ENUM!{enum D3D12_RENDER_PASS_TIER {
    D3D12_RENDER_PASS_TIER_0 = 0,
    D3D12_RENDER_PASS_TIER_1 = 1,
    D3D12_RENDER_PASS_TIER_2 = 2,
}}

ENUM!{enum D3D12_RAYTRACING_TIER {
    D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0,
    D3D12_RAYTRACING_TIER_1_0 = 10,
}}

STRUCT!{struct D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
    SRVOnlyTiledResourceTier3: i32,
    RenderPassesTier: D3D12_RENDER_PASS_TIER,
    RaytracingTier: D3D12_RAYTRACING_TIER,
}}

STRUCT!{struct D3D12_RESOURCE_ALLOCATION_INFO {
    SizeInBytes: u64,
    Alignment: u64,
}}

STRUCT!{struct D3D12_RESOURCE_ALLOCATION_INFO1 {
    Offset: u64,
    Alignment: u64,
    SizeInBytes: u64,
}}

STRUCT!{struct D3D12_DEPTH_STENCIL_VALUE {
    Depth: f32,
    Stencil: u8,
}}

STRUCT!{struct D3D12_CLEAR_VALUE {
    Format: DXGI_FORMAT,
    __MIDL____MIDL_itf_d3d12_0001_00000000: __MIDL___MIDL_itf_d3d12_0001_0000_0001,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0001 {
    [u32; 4],
    Color Color_mut: [f32; 4],
    DepthStencil DepthStencil_mut: D3D12_DEPTH_STENCIL_VALUE,
}}

STRUCT!{struct D3D12_RANGE_UINT64 {
    Begin: u64,
    End: u64,
}}

STRUCT!{struct D3D12_SUBRESOURCE_RANGE_UINT64 {
    Subresource: UINT,
    Range: D3D12_RANGE_UINT64,
}}

STRUCT!{struct D3D12_SUBRESOURCE_INFO {
    Offset: u64,
    RowPitch: UINT,
    DepthPitch: UINT,
}}

STRUCT!{struct D3D12_SUBRESOURCE_TILING {
    WidthInTiles: UINT,
    HeightInTiles: u16,
    DepthInTiles: u16,
    StartTileIndexInOverallResource: UINT,
}}

STRUCT!{struct D3D12_TILE_SHAPE {
    WidthInTexels: UINT,
    HeightInTexels: UINT,
    DepthInTexels: UINT,
}}

STRUCT!{struct D3D12_PACKED_MIP_INFO {
    NumStandardMips: u8,
    NumPackedMips: u8,
    NumTilesForPackedMips: UINT,
    StartTileIndexInOverallResource: UINT,
}}

ENUM!{enum D3D12_TILE_COPY_FLAGS {
    D3D12_TILE_COPY_FLAG_NONE = 0,
    D3D12_TILE_COPY_FLAG_NO_HAZARD = 1,
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2,
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4,
}}

ENUM!{enum D3D12_RESOURCE_STATES {
    D3D12_RESOURCE_STATE_COMMON = 0,
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1,
    D3D12_RESOURCE_STATE_INDEX_BUFFER = 2,
    D3D12_RESOURCE_STATE_RENDER_TARGET = 4,
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8,
    D3D12_RESOURCE_STATE_DEPTH_WRITE = 16,
    D3D12_RESOURCE_STATE_DEPTH_READ = 32,
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64,
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128,
    D3D12_RESOURCE_STATE_STREAM_OUT = 256,
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512,
    D3D12_RESOURCE_STATE_COPY_DEST = 1024,
    D3D12_RESOURCE_STATE_COPY_SOURCE = 2048,
    D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096,
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192,
    D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304,
    D3D12_RESOURCE_STATE_GENERIC_READ = 2755,
    D3D12_RESOURCE_STATE_PRESENT = 0,
    D3D12_RESOURCE_STATE_PREDICATION = 512,
    D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536,
    D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072,
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144,
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288,
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152,
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608,
}}

ENUM!{enum D3D12_RESOURCE_BARRIER_TYPE {
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1,
    D3D12_RESOURCE_BARRIER_TYPE_UAV = 2,
}}

STRUCT!{struct D3D12_RESOURCE_TRANSITION_BARRIER {
    pResource: *mut ID3D12Resource,
    Subresource: UINT,
    StateBefore: D3D12_RESOURCE_STATES,
    StateAfter: D3D12_RESOURCE_STATES,
}}

STRUCT!{struct D3D12_RESOURCE_ALIASING_BARRIER {
    pResourceBefore: *mut ID3D12Resource,
    pResourceAfter: *mut ID3D12Resource,
}}

STRUCT!{struct D3D12_RESOURCE_UAV_BARRIER {
    pResource: *mut ID3D12Resource,
}}

ENUM!{enum D3D12_RESOURCE_BARRIER_FLAGS {
    D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1,
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2,
}}

STRUCT!{struct D3D12_RESOURCE_BARRIER {
    Type: D3D12_RESOURCE_BARRIER_TYPE,
    Flags: D3D12_RESOURCE_BARRIER_FLAGS,
    __MIDL____MIDL_itf_d3d12_0001_00000001: __MIDL___MIDL_itf_d3d12_0001_0000_0002,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0002 {
    [u64; 3],
    Transition Transition_mut: D3D12_RESOURCE_TRANSITION_BARRIER,
    Aliasing Aliasing_mut: D3D12_RESOURCE_ALIASING_BARRIER,
    UAV UAV_mut: D3D12_RESOURCE_UAV_BARRIER,
}}

STRUCT!{struct D3D12_SUBRESOURCE_FOOTPRINT {
    Format: DXGI_FORMAT,
    Width: UINT,
    Height: UINT,
    Depth: UINT,
    RowPitch: UINT,
}}

STRUCT!{struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    Offset: u64,
    Footprint: D3D12_SUBRESOURCE_FOOTPRINT,
}}

ENUM!{enum D3D12_TEXTURE_COPY_TYPE {
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1,
}}

STRUCT!{struct D3D12_TEXTURE_COPY_LOCATION {
    pResource: *mut ID3D12Resource,
    Type: D3D12_TEXTURE_COPY_TYPE,
    __MIDL____MIDL_itf_d3d12_0001_00000002: __MIDL___MIDL_itf_d3d12_0001_0000_0003,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0003 {
    [u64; 4],
    PlacedFootprint PlacedFootprint_mut: D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
    SubresourceIndex SubresourceIndex_mut: UINT,
}}

ENUM!{enum D3D12_RESOLVE_MODE {
    D3D12_RESOLVE_MODE_DECOMPRESS = 0,
    D3D12_RESOLVE_MODE_MIN = 1,
    D3D12_RESOLVE_MODE_MAX = 2,
    D3D12_RESOLVE_MODE_AVERAGE = 3,
}}

STRUCT!{struct D3D12_SAMPLE_POSITION {
    X: i8,
    Y: i8,
}}

STRUCT!{struct D3D12_VIEW_INSTANCE_LOCATION {
    ViewportArrayIndex: UINT,
    RenderTargetArrayIndex: UINT,
}}

ENUM!{enum D3D12_VIEW_INSTANCING_FLAGS {
    D3D12_VIEW_INSTANCING_FLAG_NONE = 0,
    D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1,
}}

STRUCT!{struct D3D12_VIEW_INSTANCING_DESC {
    ViewInstanceCount: UINT,
    pViewInstanceLocations: *mut D3D12_VIEW_INSTANCE_LOCATION,
    Flags: D3D12_VIEW_INSTANCING_FLAGS,
}}

ENUM!{enum D3D12_SHADER_COMPONENT_MAPPING {
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5,
}}

ENUM!{enum D3D12_BUFFER_SRV_FLAGS {
    D3D12_BUFFER_SRV_FLAG_NONE = 0,
    D3D12_BUFFER_SRV_FLAG_RAW = 1,
}}

STRUCT!{struct D3D12_BUFFER_SRV {
    FirstElement: u64,
    NumElements: UINT,
    StructureByteStride: UINT,
    Flags: D3D12_BUFFER_SRV_FLAGS,
}}

STRUCT!{struct D3D12_TEX1D_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEX1D_ARRAY_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEX2D_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    PlaneSlice: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEX2D_ARRAY_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
    PlaneSlice: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEX3D_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEXCUBE_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEXCUBE_ARRAY_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    First2DArrayFace: UINT,
    NumCubes: UINT,
    ResourceMinLODClamp: f32,
}}

STRUCT!{struct D3D12_TEX2DMS_SRV {
    UnusedField_NothingToDefine: UINT,
}}

STRUCT!{struct D3D12_TEX2DMS_ARRAY_SRV {
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
    Location: u64,
}}

ENUM!{enum D3D12_SRV_DIMENSION {
    D3D12_SRV_DIMENSION_UNKNOWN = 0,
    D3D12_SRV_DIMENSION_BUFFER = 1,
    D3D12_SRV_DIMENSION_TEXTURE1D = 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_SRV_DIMENSION_TEXTURE2D = 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_SRV_DIMENSION_TEXTURE3D = 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
    D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11,
}}

STRUCT!{struct D3D12_SHADER_RESOURCE_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_SRV_DIMENSION,
    Shader4ComponentMapping: UINT,
    __MIDL____MIDL_itf_d3d12_0001_00000003: __MIDL___MIDL_itf_d3d12_0001_0000_0004,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0004 {
    [u64; 3],
    Buffer Buffer_mut: D3D12_BUFFER_SRV,
    Texture1D Texture1D_mut: D3D12_TEX1D_SRV,
    Texture1DArray Texture1DArray_mut: D3D12_TEX1D_ARRAY_SRV,
    Texture2D Texture2D_mut: D3D12_TEX2D_SRV,
    Texture2DArray Texture2DArray_mut: D3D12_TEX2D_ARRAY_SRV,
    Texture2DMS Texture2DMS_mut: D3D12_TEX2DMS_SRV,
    Texture2DMSArray Texture2DMSArray_mut: D3D12_TEX2DMS_ARRAY_SRV,
    Texture3D Texture3D_mut: D3D12_TEX3D_SRV,
    TextureCube TextureCube_mut: D3D12_TEXCUBE_SRV,
    TextureCubeArray TextureCubeArray_mut: D3D12_TEXCUBE_ARRAY_SRV,
    RaytracingAccelerationStructure RaytracingAccelerationStructure_mut: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV,
}}

STRUCT!{struct D3D12_CONSTANT_BUFFER_VIEW_DESC {
    BufferLocation: u64,
    SizeInBytes: UINT,
}}

ENUM!{enum D3D12_FILTER {
    D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21,
    D3D12_FILTER_ANISOTROPIC = 85,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
    D3D12_FILTER_COMPARISON_ANISOTROPIC = 213,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277,
    D3D12_FILTER_MINIMUM_ANISOTROPIC = 341,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469,
}}

ENUM!{enum D3D12_FILTER_TYPE {
    D3D12_FILTER_TYPE_POINT = 0,
    D3D12_FILTER_TYPE_LINEAR = 1,
}}

ENUM!{enum D3D12_FILTER_REDUCTION_TYPE {
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3,
}}

ENUM!{enum D3D12_TEXTURE_ADDRESS_MODE {
    D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
    D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5,
}}

STRUCT!{struct D3D12_SAMPLER_DESC {
    Filter: D3D12_FILTER,
    AddressU: D3D12_TEXTURE_ADDRESS_MODE,
    AddressV: D3D12_TEXTURE_ADDRESS_MODE,
    AddressW: D3D12_TEXTURE_ADDRESS_MODE,
    MipLODBias: f32,
    MaxAnisotropy: UINT,
    ComparisonFunc: D3D12_COMPARISON_FUNC,
    BorderColor: [f32; 4],
    MinLOD: f32,
    MaxLOD: f32,
}}

ENUM!{enum D3D12_BUFFER_UAV_FLAGS {
    D3D12_BUFFER_UAV_FLAG_NONE = 0,
    D3D12_BUFFER_UAV_FLAG_RAW = 1,
}}

STRUCT!{struct D3D12_BUFFER_UAV {
    FirstElement: u64,
    NumElements: UINT,
    StructureByteStride: UINT,
    CounterOffsetInBytes: u64,
    Flags: D3D12_BUFFER_UAV_FLAGS,
}}

STRUCT!{struct D3D12_TEX1D_UAV {
    MipSlice: UINT,
}}

STRUCT!{struct D3D12_TEX1D_ARRAY_UAV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

STRUCT!{struct D3D12_TEX2D_UAV {
    MipSlice: UINT,
    PlaneSlice: UINT,
}}

STRUCT!{struct D3D12_TEX2D_ARRAY_UAV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
    PlaneSlice: UINT,
}}

STRUCT!{struct D3D12_TEX3D_UAV {
    MipSlice: UINT,
    FirstWSlice: UINT,
    WSize: UINT,
}}

ENUM!{enum D3D12_UAV_DIMENSION {
    D3D12_UAV_DIMENSION_UNKNOWN = 0,
    D3D12_UAV_DIMENSION_BUFFER = 1,
    D3D12_UAV_DIMENSION_TEXTURE1D = 2,
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_UAV_DIMENSION_TEXTURE2D = 4,
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_UAV_DIMENSION_TEXTURE3D = 8,
}}

STRUCT!{struct D3D12_UNORDERED_ACCESS_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_UAV_DIMENSION,
    __MIDL____MIDL_itf_d3d12_0001_00000004: __MIDL___MIDL_itf_d3d12_0001_0000_0005,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0005 {
    [u64; 4],
    Buffer Buffer_mut: D3D12_BUFFER_UAV,
    Texture1D Texture1D_mut: D3D12_TEX1D_UAV,
    Texture1DArray Texture1DArray_mut: D3D12_TEX1D_ARRAY_UAV,
    Texture2D Texture2D_mut: D3D12_TEX2D_UAV,
    Texture2DArray Texture2DArray_mut: D3D12_TEX2D_ARRAY_UAV,
    Texture3D Texture3D_mut: D3D12_TEX3D_UAV,
}}

STRUCT!{struct D3D12_BUFFER_RTV {
    FirstElement: u64,
    NumElements: UINT,
}}

STRUCT!{struct D3D12_TEX1D_RTV {
    MipSlice: UINT,
}}

STRUCT!{struct D3D12_TEX1D_ARRAY_RTV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

STRUCT!{struct D3D12_TEX2D_RTV {
    MipSlice: UINT,
    PlaneSlice: UINT,
}}

STRUCT!{struct D3D12_TEX2DMS_RTV {
    UnusedField_NothingToDefine: UINT,
}}

STRUCT!{struct D3D12_TEX2D_ARRAY_RTV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
    PlaneSlice: UINT,
}}

STRUCT!{struct D3D12_TEX2DMS_ARRAY_RTV {
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

STRUCT!{struct D3D12_TEX3D_RTV {
    MipSlice: UINT,
    FirstWSlice: UINT,
    WSize: UINT,
}}

ENUM!{enum D3D12_RTV_DIMENSION {
    D3D12_RTV_DIMENSION_UNKNOWN = 0,
    D3D12_RTV_DIMENSION_BUFFER = 1,
    D3D12_RTV_DIMENSION_TEXTURE1D = 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_RTV_DIMENSION_TEXTURE2D = 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_RTV_DIMENSION_TEXTURE3D = 8,
}}

STRUCT!{struct D3D12_RENDER_TARGET_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_RTV_DIMENSION,
    __MIDL____MIDL_itf_d3d12_0001_00000005: __MIDL___MIDL_itf_d3d12_0001_0000_0006,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0006 {
    [u64; 2],
    Buffer Buffer_mut: D3D12_BUFFER_RTV,
    Texture1D Texture1D_mut: D3D12_TEX1D_RTV,
    Texture1DArray Texture1DArray_mut: D3D12_TEX1D_ARRAY_RTV,
    Texture2D Texture2D_mut: D3D12_TEX2D_RTV,
    Texture2DArray Texture2DArray_mut: D3D12_TEX2D_ARRAY_RTV,
    Texture2DMS Texture2DMS_mut: D3D12_TEX2DMS_RTV,
    Texture2DMSArray Texture2DMSArray_mut: D3D12_TEX2DMS_ARRAY_RTV,
    Texture3D Texture3D_mut: D3D12_TEX3D_RTV,
}}

STRUCT!{struct D3D12_TEX1D_DSV {
    MipSlice: UINT,
}}

STRUCT!{struct D3D12_TEX1D_ARRAY_DSV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

STRUCT!{struct D3D12_TEX2D_DSV {
    MipSlice: UINT,
}}

STRUCT!{struct D3D12_TEX2D_ARRAY_DSV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

STRUCT!{struct D3D12_TEX2DMS_DSV {
    UnusedField_NothingToDefine: UINT,
}}

STRUCT!{struct D3D12_TEX2DMS_ARRAY_DSV {
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}

ENUM!{enum D3D12_DSV_FLAGS {
    D3D12_DSV_FLAG_NONE = 0,
    D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1,
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2,
}}

ENUM!{enum D3D12_DSV_DIMENSION {
    D3D12_DSV_DIMENSION_UNKNOWN = 0,
    D3D12_DSV_DIMENSION_TEXTURE1D = 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D12_DSV_DIMENSION_TEXTURE2D = 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
}}

STRUCT!{struct D3D12_DEPTH_STENCIL_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D12_DSV_DIMENSION,
    Flags: D3D12_DSV_FLAGS,
    __MIDL____MIDL_itf_d3d12_0001_00000006: __MIDL___MIDL_itf_d3d12_0001_0000_0007,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0007 {
    [u32; 3],
    Texture1D Texture1D_mut: D3D12_TEX1D_DSV,
    Texture1DArray Texture1DArray_mut: D3D12_TEX1D_ARRAY_DSV,
    Texture2D Texture2D_mut: D3D12_TEX2D_DSV,
    Texture2DArray Texture2DArray_mut: D3D12_TEX2D_ARRAY_DSV,
    Texture2DMS Texture2DMS_mut: D3D12_TEX2DMS_DSV,
    Texture2DMSArray Texture2DMSArray_mut: D3D12_TEX2DMS_ARRAY_DSV,
}}

ENUM!{enum D3D12_CLEAR_FLAGS {
    D3D12_CLEAR_FLAG_DEPTH = 1,
    D3D12_CLEAR_FLAG_STENCIL = 2,
}}

ENUM!{enum D3D12_FENCE_FLAGS {
    D3D12_FENCE_FLAG_NONE = 0,
    D3D12_FENCE_FLAG_SHARED = 1,
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2,
    D3D12_FENCE_FLAG_NON_MONITORED = 4,
}}

ENUM!{enum D3D12_DESCRIPTOR_HEAP_TYPE {
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1,
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2,
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3,
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4,
}}

ENUM!{enum D3D12_DESCRIPTOR_HEAP_FLAGS {
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1,
}}

STRUCT!{struct D3D12_DESCRIPTOR_HEAP_DESC {
    Type: D3D12_DESCRIPTOR_HEAP_TYPE,
    NumDescriptors: UINT,
    Flags: D3D12_DESCRIPTOR_HEAP_FLAGS,
    NodeMask: UINT,
}}

ENUM!{enum D3D12_DESCRIPTOR_RANGE_TYPE {
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0,
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1,
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2,
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3,
}}

STRUCT!{struct D3D12_DESCRIPTOR_RANGE {
    RangeType: D3D12_DESCRIPTOR_RANGE_TYPE,
    NumDescriptors: UINT,
    BaseShaderRegister: UINT,
    RegisterSpace: UINT,
    OffsetInDescriptorsFromTableStart: UINT,
}}

STRUCT!{struct D3D12_ROOT_DESCRIPTOR_TABLE {
    NumDescriptorRanges: UINT,
    pDescriptorRanges: *mut D3D12_DESCRIPTOR_RANGE,
}}

STRUCT!{struct D3D12_ROOT_CONSTANTS {
    ShaderRegister: UINT,
    RegisterSpace: UINT,
    Num32BitValues: UINT,
}}

STRUCT!{struct D3D12_ROOT_DESCRIPTOR {
    ShaderRegister: UINT,
    RegisterSpace: UINT,
}}

ENUM!{enum D3D12_SHADER_VISIBILITY {
    D3D12_SHADER_VISIBILITY_ALL = 0,
    D3D12_SHADER_VISIBILITY_VERTEX = 1,
    D3D12_SHADER_VISIBILITY_HULL = 2,
    D3D12_SHADER_VISIBILITY_DOMAIN = 3,
    D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
    D3D12_SHADER_VISIBILITY_PIXEL = 5,
}}

ENUM!{enum D3D12_ROOT_PARAMETER_TYPE {
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1,
    D3D12_ROOT_PARAMETER_TYPE_CBV = 2,
    D3D12_ROOT_PARAMETER_TYPE_SRV = 3,
    D3D12_ROOT_PARAMETER_TYPE_UAV = 4,
}}

STRUCT!{struct D3D12_ROOT_PARAMETER {
    ParameterType: D3D12_ROOT_PARAMETER_TYPE,
    __MIDL____MIDL_itf_d3d12_0001_00000007: __MIDL___MIDL_itf_d3d12_0001_0000_0008,
    ShaderVisibility: D3D12_SHADER_VISIBILITY,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0008 {
    [u64; 2],
    DescriptorTable DescriptorTable_mut: D3D12_ROOT_DESCRIPTOR_TABLE,
    Constants Constants_mut: D3D12_ROOT_CONSTANTS,
    Descriptor Descriptor_mut: D3D12_ROOT_DESCRIPTOR,
}}

ENUM!{enum D3D12_ROOT_SIGNATURE_FLAGS {
    D3D12_ROOT_SIGNATURE_FLAG_NONE = 0,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64,
    D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128,
}}

ENUM!{enum D3D12_STATIC_BORDER_COLOR {
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2,
}}

STRUCT!{struct D3D12_STATIC_SAMPLER_DESC {
    Filter: D3D12_FILTER,
    AddressU: D3D12_TEXTURE_ADDRESS_MODE,
    AddressV: D3D12_TEXTURE_ADDRESS_MODE,
    AddressW: D3D12_TEXTURE_ADDRESS_MODE,
    MipLODBias: f32,
    MaxAnisotropy: UINT,
    ComparisonFunc: D3D12_COMPARISON_FUNC,
    BorderColor: D3D12_STATIC_BORDER_COLOR,
    MinLOD: f32,
    MaxLOD: f32,
    ShaderRegister: UINT,
    RegisterSpace: UINT,
    ShaderVisibility: D3D12_SHADER_VISIBILITY,
}}

STRUCT!{struct D3D12_ROOT_SIGNATURE_DESC {
    NumParameters: UINT,
    pParameters: *mut D3D12_ROOT_PARAMETER,
    NumStaticSamplers: UINT,
    pStaticSamplers: *mut D3D12_STATIC_SAMPLER_DESC,
    Flags: D3D12_ROOT_SIGNATURE_FLAGS,
}}

ENUM!{enum D3D12_DESCRIPTOR_RANGE_FLAGS {
    D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0,
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8,
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536,
}}

STRUCT!{struct D3D12_DESCRIPTOR_RANGE1 {
    RangeType: D3D12_DESCRIPTOR_RANGE_TYPE,
    NumDescriptors: UINT,
    BaseShaderRegister: UINT,
    RegisterSpace: UINT,
    Flags: D3D12_DESCRIPTOR_RANGE_FLAGS,
    OffsetInDescriptorsFromTableStart: UINT,
}}

STRUCT!{struct D3D12_ROOT_DESCRIPTOR_TABLE1 {
    NumDescriptorRanges: UINT,
    pDescriptorRanges: *mut D3D12_DESCRIPTOR_RANGE1,
}}

ENUM!{enum D3D12_ROOT_DESCRIPTOR_FLAGS {
    D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8,
}}

STRUCT!{struct D3D12_ROOT_DESCRIPTOR1 {
    ShaderRegister: UINT,
    RegisterSpace: UINT,
    Flags: D3D12_ROOT_DESCRIPTOR_FLAGS,
}}

STRUCT!{struct D3D12_ROOT_PARAMETER1 {
    ParameterType: D3D12_ROOT_PARAMETER_TYPE,
    __MIDL____MIDL_itf_d3d12_0001_00000008: __MIDL___MIDL_itf_d3d12_0001_0000_0009,
    ShaderVisibility: D3D12_SHADER_VISIBILITY,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0009 {
    [u64; 2],
    DescriptorTable DescriptorTable_mut: D3D12_ROOT_DESCRIPTOR_TABLE1,
    Constants Constants_mut: D3D12_ROOT_CONSTANTS,
    Descriptor Descriptor_mut: D3D12_ROOT_DESCRIPTOR1,
}}

STRUCT!{struct D3D12_ROOT_SIGNATURE_DESC1 {
    NumParameters: UINT,
    pParameters: *mut D3D12_ROOT_PARAMETER1,
    NumStaticSamplers: UINT,
    pStaticSamplers: *mut D3D12_STATIC_SAMPLER_DESC,
    Flags: D3D12_ROOT_SIGNATURE_FLAGS,
}}

STRUCT!{struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC {
    Version: D3D_ROOT_SIGNATURE_VERSION,
    __MIDL____MIDL_itf_d3d12_0001_00000009: __MIDL___MIDL_itf_d3d12_0001_0000_0010,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0000_0010 {
    [u64; 5],
    Desc_1_0 Desc_1_0_mut: D3D12_ROOT_SIGNATURE_DESC,
    Desc_1_1 Desc_1_1_mut: D3D12_ROOT_SIGNATURE_DESC1,
}}

RIDL!{#[uuid(0x34ab647b, 0x3cc8, 0x46ac, 0x84, 0x1b, 0xc0, 0x96, 0x56, 0x45, 0xc0, 0x46)]
interface ID3D12RootSignatureDeserializer(ID3D12RootSignatureDeserializerVtbl): IUnknown(IUnknownVtbl) {
    fn GetRootSignatureDesc(
    ) -> *mut D3D12_ROOT_SIGNATURE_DESC,
}}

RIDL!{#[uuid(0x7f91ce67, 0x090c, 0x4bb7, 0xb7, 0x8e, 0xed, 0x8f, 0xf2, 0xe3, 0x1d, 0xa0)]
interface ID3D12VersionedRootSignatureDeserializer(ID3D12VersionedRootSignatureDeserializerVtbl): IUnknown(IUnknownVtbl) {
    fn GetRootSignatureDescAtVersion(
        convertToVersion: D3D_ROOT_SIGNATURE_VERSION,
        ppDesc: *mut *mut D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
    ) -> HRESULT,
    fn GetUnconvertedRootSignatureDesc(
    ) -> *mut D3D12_VERSIONED_ROOT_SIGNATURE_DESC,
}}

STRUCT!{struct D3D12_CPU_DESCRIPTOR_HANDLE {
    ptr: ULONG_PTR,
}}

STRUCT!{struct D3D12_GPU_DESCRIPTOR_HANDLE {
    ptr: u64,
}}

STRUCT!{struct D3D12_DISCARD_REGION {
    NumRects: UINT,
    pRects: *mut tagRECT,
    FirstSubresource: UINT,
    NumSubresources: UINT,
}}

ENUM!{enum D3D12_QUERY_HEAP_TYPE {
    D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3,
    D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4,
    D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5,
}}

STRUCT!{struct D3D12_QUERY_HEAP_DESC {
    Type: D3D12_QUERY_HEAP_TYPE,
    Count: UINT,
    NodeMask: UINT,
}}

ENUM!{enum D3D12_QUERY_TYPE {
    D3D12_QUERY_TYPE_OCCLUSION = 0,
    D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
    D3D12_QUERY_TYPE_TIMESTAMP = 2,
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7,
    D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8,
}}

ENUM!{enum D3D12_PREDICATION_OP {
    D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1,
}}

STRUCT!{struct D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    IAVertices: u64,
    IAPrimitives: u64,
    VSInvocations: u64,
    GSInvocations: u64,
    GSPrimitives: u64,
    CInvocations: u64,
    CPrimitives: u64,
    PSInvocations: u64,
    HSInvocations: u64,
    DSInvocations: u64,
    CSInvocations: u64,
}}

STRUCT!{struct D3D12_QUERY_DATA_SO_STATISTICS {
    NumPrimitivesWritten: u64,
    PrimitivesStorageNeeded: u64,
}}

STRUCT!{struct D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    BufferLocation: u64,
    SizeInBytes: u64,
    BufferFilledSizeLocation: u64,
}}

STRUCT!{struct D3D12_DRAW_ARGUMENTS {
    VertexCountPerInstance: UINT,
    InstanceCount: UINT,
    StartVertexLocation: UINT,
    StartInstanceLocation: UINT,
}}

STRUCT!{struct D3D12_DRAW_INDEXED_ARGUMENTS {
    IndexCountPerInstance: UINT,
    InstanceCount: UINT,
    StartIndexLocation: UINT,
    BaseVertexLocation: INT,
    StartInstanceLocation: UINT,
}}

STRUCT!{struct D3D12_DISPATCH_ARGUMENTS {
    ThreadGroupCountX: UINT,
    ThreadGroupCountY: UINT,
    ThreadGroupCountZ: UINT,
}}

STRUCT!{struct D3D12_VERTEX_BUFFER_VIEW {
    BufferLocation: u64,
    SizeInBytes: UINT,
    StrideInBytes: UINT,
}}

STRUCT!{struct D3D12_INDEX_BUFFER_VIEW {
    BufferLocation: u64,
    SizeInBytes: UINT,
    Format: DXGI_FORMAT,
}}

ENUM!{enum D3D12_INDIRECT_ARGUMENT_TYPE {
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2,
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3,
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4,
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5,
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6,
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7,
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8,
}}

STRUCT!{struct D3D12_INDIRECT_ARGUMENT_DESC {
    Type: D3D12_INDIRECT_ARGUMENT_TYPE,
    __MIDL____MIDL_itf_d3d12_0001_00020000: __MIDL___MIDL_itf_d3d12_0001_0002_0001,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0002_0001 {
    [u32; 3],
    VertexBuffer VertexBuffer_mut: __MIDL___MIDL_itf_d3d12_0001_0002_0002,
    Constant Constant_mut: __MIDL___MIDL_itf_d3d12_0001_0002_0003,
    ConstantBufferView ConstantBufferView_mut: __MIDL___MIDL_itf_d3d12_0001_0002_0004,
    ShaderResourceView ShaderResourceView_mut: __MIDL___MIDL_itf_d3d12_0001_0002_0005,
    UnorderedAccessView UnorderedAccessView_mut: __MIDL___MIDL_itf_d3d12_0001_0002_0006,
}}

STRUCT!{struct __MIDL___MIDL_itf_d3d12_0001_0002_0002 {
    Slot: UINT,
}}

STRUCT!{struct __MIDL___MIDL_itf_d3d12_0001_0002_0003 {
    RootParameterIndex: UINT,
    DestOffsetIn32BitValues: UINT,
    Num32BitValuesToSet: UINT,
}}

STRUCT!{struct __MIDL___MIDL_itf_d3d12_0001_0002_0004 {
    RootParameterIndex: UINT,
}}

STRUCT!{struct __MIDL___MIDL_itf_d3d12_0001_0002_0005 {
    RootParameterIndex: UINT,
}}

STRUCT!{struct __MIDL___MIDL_itf_d3d12_0001_0002_0006 {
    RootParameterIndex: UINT,
}}

STRUCT!{struct D3D12_COMMAND_SIGNATURE_DESC {
    ByteStride: UINT,
    NumArgumentDescs: UINT,
    pArgumentDescs: *mut D3D12_INDIRECT_ARGUMENT_DESC,
    NodeMask: UINT,
}}

RIDL!{#[uuid(0x189819f1, 0x1db6, 0x4b57, 0xbe, 0x54, 0x18, 0x21, 0x33, 0x9b, 0x85, 0xf7)]
interface ID3D12Device(ID3D12DeviceVtbl): ID3D12Object(ID3D12ObjectVtbl) {
    fn GetNodeCount(
    ) -> UINT,
    fn CreateCommandQueue(
        pDesc: *mut D3D12_COMMAND_QUEUE_DESC,
        riid: *const GUID,
        ppCommandQueue: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateCommandAllocator(
        Type: D3D12_COMMAND_LIST_TYPE,
        riid: *const GUID,
        ppCommandAllocator: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateGraphicsPipelineState(
        pDesc: *mut D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const GUID,
        ppPipelineState: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateComputePipelineState(
        pDesc: *mut D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const GUID,
        ppPipelineState: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateCommandList(
        NodeMask: UINT,
        Type: D3D12_COMMAND_LIST_TYPE,
        pCommandAllocator: *mut ID3D12CommandAllocator,
        pInitialState: *mut ID3D12PipelineState,
        riid: *const GUID,
        ppCommandList: *mut *mut c_void,
    ) -> HRESULT,
    fn CheckFeatureSupport(
        Feature: D3D12_FEATURE,
        pFeatureSupportData: *mut c_void,
        FeatureSupportDataSize: UINT,
    ) -> HRESULT,
    fn CreateDescriptorHeap(
        pDescriptorHeapDesc: *mut D3D12_DESCRIPTOR_HEAP_DESC,
        riid: *const GUID,
        ppvHeap: *mut *mut c_void,
    ) -> HRESULT,
    fn GetDescriptorHandleIncrementSize(
        DescriptorHeapType: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> UINT,
    fn CreateRootSignature(
        NodeMask: UINT,
        pBlobWithRootSignature: *mut c_void,
        blobLengthInBytes: ULONG_PTR,
        riid: *const GUID,
        ppvRootSignature: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateConstantBufferView(
        pDesc: *mut D3D12_CONSTANT_BUFFER_VIEW_DESC,
        DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn CreateShaderResourceView(
        pResource: *mut ID3D12Resource,
        pDesc: *mut D3D12_SHADER_RESOURCE_VIEW_DESC,
        DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn CreateUnorderedAccessView(
        pResource: *mut ID3D12Resource,
        pCounterResource: *mut ID3D12Resource,
        pDesc: *mut D3D12_UNORDERED_ACCESS_VIEW_DESC,
        DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn CreateRenderTargetView(
        pResource: *mut ID3D12Resource,
        pDesc: *mut D3D12_RENDER_TARGET_VIEW_DESC,
        DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn CreateDepthStencilView(
        pResource: *mut ID3D12Resource,
        pDesc: *mut D3D12_DEPTH_STENCIL_VIEW_DESC,
        DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn CreateSampler(
        pDesc: *mut D3D12_SAMPLER_DESC,
        DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn CopyDescriptors(
        NumDestDescriptorRanges: UINT,
        pDestDescriptorRangeStarts: *mut D3D12_CPU_DESCRIPTOR_HANDLE,
        pDestDescriptorRangeSizes: *mut UINT,
        NumSrcDescriptorRanges: UINT,
        pSrcDescriptorRangeStarts: *mut D3D12_CPU_DESCRIPTOR_HANDLE,
        pSrcDescriptorRangeSizes: *mut UINT,
        DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> c_void,
    fn CopyDescriptorsSimple(
        NumDescriptors: UINT,
        DestDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE,
        SrcDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE,
        DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE,
    ) -> c_void,
    fn GetResourceAllocationInfo(
        visibleMask: UINT,
        numResourceDescs: UINT,
        pResourceDescs: *mut D3D12_RESOURCE_DESC,
    ) -> D3D12_RESOURCE_ALLOCATION_INFO,
    fn GetCustomHeapProperties(
        NodeMask: UINT,
        heapType: D3D12_HEAP_TYPE,
    ) -> D3D12_HEAP_PROPERTIES,
    fn CreateCommittedResource(
        pHeapProperties: *mut D3D12_HEAP_PROPERTIES,
        HeapFlags: D3D12_HEAP_FLAGS,
        pDesc: *mut D3D12_RESOURCE_DESC,
        InitialResourceState: D3D12_RESOURCE_STATES,
        pOptimizedClearValue: *mut D3D12_CLEAR_VALUE,
        riidResource: *const GUID,
        ppvResource: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateHeap(
        pDesc: *mut D3D12_HEAP_DESC,
        riid: *const GUID,
        ppvHeap: *mut *mut c_void,
    ) -> HRESULT,
    fn CreatePlacedResource(
        pHeap: *mut ID3D12Heap,
        HeapOffset: u64,
        pDesc: *mut D3D12_RESOURCE_DESC,
        InitialState: D3D12_RESOURCE_STATES,
        pOptimizedClearValue: *mut D3D12_CLEAR_VALUE,
        riid: *const GUID,
        ppvResource: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateReservedResource(
        pDesc: *mut D3D12_RESOURCE_DESC,
        InitialState: D3D12_RESOURCE_STATES,
        pOptimizedClearValue: *mut D3D12_CLEAR_VALUE,
        riid: *const GUID,
        ppvResource: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateSharedHandle(
        pObject: *mut ID3D12DeviceChild,
        pAttributes: *mut _SECURITY_ATTRIBUTES,
        Access: u32,
        Name: LPCWSTR,
        pHandle: *mut *mut c_void,
    ) -> HRESULT,
    fn OpenSharedHandle(
        NTHandle: *mut c_void,
        riid: *const GUID,
        ppvObj: *mut *mut c_void,
    ) -> HRESULT,
    fn OpenSharedHandleByName(
        Name: LPCWSTR,
        Access: u32,
        pNTHandle: *mut *mut c_void,
    ) -> HRESULT,
    fn MakeResident(
        NumObjects: UINT,
        ppObjects: *mut *mut ID3D12Pageable,
    ) -> HRESULT,
    fn Evict(
        NumObjects: UINT,
        ppObjects: *mut *mut ID3D12Pageable,
    ) -> HRESULT,
    fn CreateFence(
        InitialValue: u64,
        Flags: D3D12_FENCE_FLAGS,
        riid: *const GUID,
        ppFence: *mut *mut c_void,
    ) -> HRESULT,
    fn GetDeviceRemovedReason(
    ) -> HRESULT,
    fn GetCopyableFootprints(
        pResourceDesc: *mut D3D12_RESOURCE_DESC,
        FirstSubresource: UINT,
        NumSubresources: UINT,
        BaseOffset: u64,
        pLayouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        pNumRows: *mut UINT,
        pRowSizeInBytes: *mut u64,
        pTotalBytes: *mut u64,
    ) -> c_void,
    fn CreateQueryHeap(
        pDesc: *mut D3D12_QUERY_HEAP_DESC,
        riid: *const GUID,
        ppvHeap: *mut *mut c_void,
    ) -> HRESULT,
    fn SetStablePowerState(
        Enable: i32,
    ) -> HRESULT,
    fn CreateCommandSignature(
        pDesc: *mut D3D12_COMMAND_SIGNATURE_DESC,
        pRootSignature: *mut ID3D12RootSignature,
        riid: *const GUID,
        ppvCommandSignature: *mut *mut c_void,
    ) -> HRESULT,
    fn GetResourceTiling(
        pTiledResource: *mut ID3D12Resource,
        pNumTilesForEntireResource: *mut UINT,
        pPackedMipDesc: *mut D3D12_PACKED_MIP_INFO,
        pStandardTileShapeForNonPackedMips: *mut D3D12_TILE_SHAPE,
        pNumSubresourceTilings: *mut UINT,
        FirstSubresourceTilingToGet: UINT,
        pSubresourceTilingsForNonPackedMips: *mut D3D12_SUBRESOURCE_TILING,
    ) -> c_void,
    fn GetAdapterLuid(
    ) -> __LUID,
}}

RIDL!{#[uuid(0x6102dee4, 0xaf59, 0x4b09, 0xb9, 0x99, 0xb4, 0x4d, 0x73, 0xf0, 0x9b, 0x24)]
interface ID3D12CommandAllocator(ID3D12CommandAllocatorVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn Reset(
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x765a30f3, 0xf624, 0x4c6f, 0xa8, 0x28, 0xac, 0xe9, 0x48, 0x62, 0x24, 0x45)]
interface ID3D12PipelineState(ID3D12PipelineStateVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn GetCachedBlob(
        ppBlob: *mut *mut ID3D10Blob,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x8ba5fb08, 0x5195, 0x40e2, 0xac, 0x58, 0x0d, 0x98, 0x9c, 0x3a, 0x01, 0x02)]
interface ID3D10Blob(ID3D10BlobVtbl): IUnknown(IUnknownVtbl) {
    fn GetBufferPointer(
    ) -> *mut c_void,
    fn GetBufferSize(
    ) -> ULONG_PTR,
}}

STRUCT!{struct _SECURITY_ATTRIBUTES {
    nLength: u32,
    lpSecurityDescriptor: *mut c_void,
    bInheritHandle: i32,
}}

STRUCT!{struct __LUID {
    LowPart: u32,
    HighPart: i32,
}}

RIDL!{#[uuid(0x433685fe, 0xe22b, 0x4ca0, 0xa8, 0xdb, 0xb5, 0xb4, 0xf4, 0xdd, 0x0e, 0x4a)]
interface ID3D12Fence1(ID3D12Fence1Vtbl): ID3D12Fence(ID3D12FenceVtbl) {
    fn GetCreationFlags(
    ) -> D3D12_FENCE_FLAGS,
}}

RIDL!{#[uuid(0x8efb471d, 0x616c, 0x4f49, 0x90, 0xf7, 0x12, 0x7b, 0xb7, 0x63, 0xfa, 0x51)]
interface ID3D12DescriptorHeap(ID3D12DescriptorHeapVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn GetDesc(
    ) -> D3D12_DESCRIPTOR_HEAP_DESC,
    fn GetCPUDescriptorHandleForHeapStart(
    ) -> D3D12_CPU_DESCRIPTOR_HANDLE,
    fn GetGPUDescriptorHandleForHeapStart(
    ) -> D3D12_GPU_DESCRIPTOR_HANDLE,
}}

RIDL!{#[uuid(0x0d9658ae, 0xed45, 0x469e, 0xa6, 0x1d, 0x97, 0x0e, 0xc5, 0x83, 0xca, 0xb4)]
interface ID3D12QueryHeap(ID3D12QueryHeapVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
}}

RIDL!{#[uuid(0xc36a797c, 0xec80, 0x4f0a, 0x89, 0x85, 0xa7, 0xb2, 0x47, 0x50, 0x82, 0xd1)]
interface ID3D12CommandSignature(ID3D12CommandSignatureVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
}}

RIDL!{#[uuid(0x5b160d0f, 0xac1b, 0x4185, 0x8b, 0xa8, 0xb3, 0xae, 0x42, 0xa5, 0xa4, 0x55)]
interface ID3D12GraphicsCommandList(ID3D12GraphicsCommandListVtbl): ID3D12CommandList(ID3D12CommandListVtbl) {
    fn Close(
    ) -> HRESULT,
    fn Reset(
        pAllocator: *mut ID3D12CommandAllocator,
        pInitialState: *mut ID3D12PipelineState,
    ) -> HRESULT,
    fn ClearState(
        pPipelineState: *mut ID3D12PipelineState,
    ) -> c_void,
    fn DrawInstanced(
        VertexCountPerInstance: UINT,
        InstanceCount: UINT,
        StartVertexLocation: UINT,
        StartInstanceLocation: UINT,
    ) -> c_void,
    fn DrawIndexedInstanced(
        IndexCountPerInstance: UINT,
        InstanceCount: UINT,
        StartIndexLocation: UINT,
        BaseVertexLocation: INT,
        StartInstanceLocation: UINT,
    ) -> c_void,
    fn Dispatch(
        ThreadGroupCountX: UINT,
        ThreadGroupCountY: UINT,
        ThreadGroupCountZ: UINT,
    ) -> c_void,
    fn CopyBufferRegion(
        pDstBuffer: *mut ID3D12Resource,
        DstOffset: u64,
        pSrcBuffer: *mut ID3D12Resource,
        SrcOffset: u64,
        NumBytes: u64,
    ) -> c_void,
    fn CopyTextureRegion(
        pDst: *mut D3D12_TEXTURE_COPY_LOCATION,
        DstX: UINT,
        DstY: UINT,
        DstZ: UINT,
        pSrc: *mut D3D12_TEXTURE_COPY_LOCATION,
        pSrcBox: *mut D3D12_BOX,
    ) -> c_void,
    fn CopyResource(
        pDstResource: *mut ID3D12Resource,
        pSrcResource: *mut ID3D12Resource,
    ) -> c_void,
    fn CopyTiles(
        pTiledResource: *mut ID3D12Resource,
        pTileRegionStartCoordinate: *mut D3D12_TILED_RESOURCE_COORDINATE,
        pTileRegionSize: *mut D3D12_TILE_REGION_SIZE,
        pBuffer: *mut ID3D12Resource,
        BufferStartOffsetInBytes: u64,
        Flags: D3D12_TILE_COPY_FLAGS,
    ) -> c_void,
    fn ResolveSubresource(
        pDstResource: *mut ID3D12Resource,
        DstSubresource: UINT,
        pSrcResource: *mut ID3D12Resource,
        SrcSubresource: UINT,
        Format: DXGI_FORMAT,
    ) -> c_void,
    fn IASetPrimitiveTopology(
        PrimitiveTopology: D3D_PRIMITIVE_TOPOLOGY,
    ) -> c_void,
    fn RSSetViewports(
        NumViewports: UINT,
        pViewports: *mut D3D12_VIEWPORT,
    ) -> c_void,
    fn RSSetScissorRects(
        NumRects: UINT,
        pRects: *mut tagRECT,
    ) -> c_void,
    fn OMSetBlendFactor(
        BlendFactor: [f32; 4],
    ) -> c_void,
    fn OMSetStencilRef(
        StencilRef: UINT,
    ) -> c_void,
    fn SetPipelineState(
        pPipelineState: *mut ID3D12PipelineState,
    ) -> c_void,
    fn ResourceBarrier(
        NumBarriers: UINT,
        pBarriers: *mut D3D12_RESOURCE_BARRIER,
    ) -> c_void,
    fn ExecuteBundle(
        pCommandList: *mut ID3D12GraphicsCommandList,
    ) -> c_void,
    fn SetDescriptorHeaps(
        NumDescriptorHeaps: UINT,
        ppDescriptorHeaps: *mut *mut ID3D12DescriptorHeap,
    ) -> c_void,
    fn SetComputeRootSignature(
        pRootSignature: *mut ID3D12RootSignature,
    ) -> c_void,
    fn SetGraphicsRootSignature(
        pRootSignature: *mut ID3D12RootSignature,
    ) -> c_void,
    fn SetComputeRootDescriptorTable(
        RootParameterIndex: UINT,
        BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn SetGraphicsRootDescriptorTable(
        RootParameterIndex: UINT,
        BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn SetComputeRoot32BitConstant(
        RootParameterIndex: UINT,
        SrcData: UINT,
        DestOffsetIn32BitValues: UINT,
    ) -> c_void,
    fn SetGraphicsRoot32BitConstant(
        RootParameterIndex: UINT,
        SrcData: UINT,
        DestOffsetIn32BitValues: UINT,
    ) -> c_void,
    fn SetComputeRoot32BitConstants(
        RootParameterIndex: UINT,
        Num32BitValuesToSet: UINT,
        pSrcData: *mut c_void,
        DestOffsetIn32BitValues: UINT,
    ) -> c_void,
    fn SetGraphicsRoot32BitConstants(
        RootParameterIndex: UINT,
        Num32BitValuesToSet: UINT,
        pSrcData: *mut c_void,
        DestOffsetIn32BitValues: UINT,
    ) -> c_void,
    fn SetComputeRootConstantBufferView(
        RootParameterIndex: UINT,
        BufferLocation: u64,
    ) -> c_void,
    fn SetGraphicsRootConstantBufferView(
        RootParameterIndex: UINT,
        BufferLocation: u64,
    ) -> c_void,
    fn SetComputeRootShaderResourceView(
        RootParameterIndex: UINT,
        BufferLocation: u64,
    ) -> c_void,
    fn SetGraphicsRootShaderResourceView(
        RootParameterIndex: UINT,
        BufferLocation: u64,
    ) -> c_void,
    fn SetComputeRootUnorderedAccessView(
        RootParameterIndex: UINT,
        BufferLocation: u64,
    ) -> c_void,
    fn SetGraphicsRootUnorderedAccessView(
        RootParameterIndex: UINT,
        BufferLocation: u64,
    ) -> c_void,
    fn IASetIndexBuffer(
        pView: *mut D3D12_INDEX_BUFFER_VIEW,
    ) -> c_void,
    fn IASetVertexBuffers(
        StartSlot: UINT,
        NumViews: UINT,
        pViews: *mut D3D12_VERTEX_BUFFER_VIEW,
    ) -> c_void,
    fn SOSetTargets(
        StartSlot: UINT,
        NumViews: UINT,
        pViews: *mut D3D12_STREAM_OUTPUT_BUFFER_VIEW,
    ) -> c_void,
    fn OMSetRenderTargets(
        NumRenderTargetDescriptors: UINT,
        pRenderTargetDescriptors: *mut D3D12_CPU_DESCRIPTOR_HANDLE,
        RTsSingleHandleToDescriptorRange: i32,
        pDepthStencilDescriptor: *mut D3D12_CPU_DESCRIPTOR_HANDLE,
    ) -> c_void,
    fn ClearDepthStencilView(
        DepthStencilView: D3D12_CPU_DESCRIPTOR_HANDLE,
        ClearFlags: D3D12_CLEAR_FLAGS,
        Depth: f32,
        Stencil: u8,
        NumRects: UINT,
        pRects: *mut tagRECT,
    ) -> c_void,
    fn ClearRenderTargetView(
        RenderTargetView: D3D12_CPU_DESCRIPTOR_HANDLE,
        ColorRGBA: [f32; 4],
        NumRects: UINT,
        pRects: *mut tagRECT,
    ) -> c_void,
    fn ClearUnorderedAccessViewUint(
        ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE,
        ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE,
        pResource: *mut ID3D12Resource,
        Values: [UINT; 4],
        NumRects: UINT,
        pRects: *mut tagRECT,
    ) -> c_void,
    fn ClearUnorderedAccessViewFloat(
        ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE,
        ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE,
        pResource: *mut ID3D12Resource,
        Values: [f32; 4],
        NumRects: UINT,
        pRects: *mut tagRECT,
    ) -> c_void,
    fn DiscardResource(
        pResource: *mut ID3D12Resource,
        pRegion: *mut D3D12_DISCARD_REGION,
    ) -> c_void,
    fn BeginQuery(
        pQueryHeap: *mut ID3D12QueryHeap,
        Type: D3D12_QUERY_TYPE,
        Index: UINT,
    ) -> c_void,
    fn EndQuery(
        pQueryHeap: *mut ID3D12QueryHeap,
        Type: D3D12_QUERY_TYPE,
        Index: UINT,
    ) -> c_void,
    fn ResolveQueryData(
        pQueryHeap: *mut ID3D12QueryHeap,
        Type: D3D12_QUERY_TYPE,
        StartIndex: UINT,
        NumQueries: UINT,
        pDestinationBuffer: *mut ID3D12Resource,
        AlignedDestinationBufferOffset: u64,
    ) -> c_void,
    fn SetPredication(
        pBuffer: *mut ID3D12Resource,
        AlignedBufferOffset: u64,
        Operation: D3D12_PREDICATION_OP,
    ) -> c_void,
    fn SetMarker(
        Metadata: UINT,
        pData: *mut c_void,
        Size: UINT,
    ) -> c_void,
    fn BeginEvent(
        Metadata: UINT,
        pData: *mut c_void,
        Size: UINT,
    ) -> c_void,
    fn EndEvent(
    ) -> c_void,
    fn ExecuteIndirect(
        pCommandSignature: *mut ID3D12CommandSignature,
        MaxCommandCount: UINT,
        pArgumentBuffer: *mut ID3D12Resource,
        ArgumentBufferOffset: u64,
        pCountBuffer: *mut ID3D12Resource,
        CountBufferOffset: u64,
    ) -> c_void,
}}

RIDL!{#[uuid(0x553103fb, 0x1fe7, 0x4557, 0xbb, 0x38, 0x94, 0x6d, 0x7d, 0x0e, 0x7c, 0xa7)]
interface ID3D12GraphicsCommandList1(ID3D12GraphicsCommandList1Vtbl): ID3D12GraphicsCommandList(ID3D12GraphicsCommandListVtbl) {
    fn AtomicCopyBufferUINT(
        pDstBuffer: *mut ID3D12Resource,
        DstOffset: u64,
        pSrcBuffer: *mut ID3D12Resource,
        SrcOffset: u64,
        Dependencies: UINT,
        ppDependentResources: *mut *mut ID3D12Resource,
        pDependentSubresourceRanges: *mut D3D12_SUBRESOURCE_RANGE_UINT64,
    ) -> c_void,
    fn AtomicCopyBufferUINT64(
        pDstBuffer: *mut ID3D12Resource,
        DstOffset: u64,
        pSrcBuffer: *mut ID3D12Resource,
        SrcOffset: u64,
        Dependencies: UINT,
        ppDependentResources: *mut *mut ID3D12Resource,
        pDependentSubresourceRanges: *mut D3D12_SUBRESOURCE_RANGE_UINT64,
    ) -> c_void,
    fn OMSetDepthBounds(
        Min: f32,
        Max: f32,
    ) -> c_void,
    fn SetSamplePositions(
        NumSamplesPerPixel: UINT,
        NumPixels: UINT,
        pSamplePositions: *mut D3D12_SAMPLE_POSITION,
    ) -> c_void,
    fn ResolveSubresourceRegion(
        pDstResource: *mut ID3D12Resource,
        DstSubresource: UINT,
        DstX: UINT,
        DstY: UINT,
        pSrcResource: *mut ID3D12Resource,
        SrcSubresource: UINT,
        pSrcRect: *mut tagRECT,
        Format: DXGI_FORMAT,
        ResolveMode: D3D12_RESOLVE_MODE,
    ) -> c_void,
    fn SetViewInstanceMask(
        Mask: UINT,
    ) -> c_void,
}}

STRUCT!{struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
    Dest: u64,
    Value: UINT,
}}

ENUM!{enum D3D12_WRITEBUFFERIMMEDIATE_MODE {
    D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0,
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1,
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2,
}}

RIDL!{#[uuid(0x38c3e585, 0xff17, 0x412c, 0x91, 0x50, 0x4f, 0xc6, 0xf9, 0xd7, 0x2a, 0x28)]
interface ID3D12GraphicsCommandList2(ID3D12GraphicsCommandList2Vtbl): ID3D12GraphicsCommandList1(ID3D12GraphicsCommandList1Vtbl) {
    fn WriteBufferImmediate(
        Count: UINT,
        pParams: *mut D3D12_WRITEBUFFERIMMEDIATE_PARAMETER,
        pModes: *mut D3D12_WRITEBUFFERIMMEDIATE_MODE,
    ) -> c_void,
}}

RIDL!{#[uuid(0xc64226a8, 0x9201, 0x46af, 0xb4, 0xcc, 0x53, 0xfb, 0x9f, 0xf7, 0x41, 0x4f)]
interface ID3D12PipelineLibrary(ID3D12PipelineLibraryVtbl): ID3D12DeviceChild(ID3D12DeviceChildVtbl) {
    fn StorePipeline(
        pName: LPCWSTR,
        pPipeline: *mut ID3D12PipelineState,
    ) -> HRESULT,
    fn LoadGraphicsPipeline(
        pName: LPCWSTR,
        pDesc: *mut D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid: *const GUID,
        ppPipelineState: *mut *mut c_void,
    ) -> HRESULT,
    fn LoadComputePipeline(
        pName: LPCWSTR,
        pDesc: *mut D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid: *const GUID,
        ppPipelineState: *mut *mut c_void,
    ) -> HRESULT,
    fn GetSerializedSize(
    ) -> ULONG_PTR,
    fn Serialize(
        pData: *mut c_void,
        DataSizeInBytes: ULONG_PTR,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x80eabf42, 0x2568, 0x4e5e, 0xbd, 0x82, 0xc3, 0x7f, 0x86, 0x96, 0x1d, 0xc3)]
interface ID3D12PipelineLibrary1(ID3D12PipelineLibrary1Vtbl): ID3D12PipelineLibrary(ID3D12PipelineLibraryVtbl) {
    fn LoadPipeline(
        pName: LPCWSTR,
        pDesc: *mut D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const GUID,
        ppPipelineState: *mut *mut c_void,
    ) -> HRESULT,
}}

ENUM!{enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS {
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0,
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1,
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0,
}}

ENUM!{enum D3D12_RESIDENCY_PRIORITY {
    D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640,
    D3D12_RESIDENCY_PRIORITY_LOW = 1342177280,
    D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920,
    D3D12_RESIDENCY_PRIORITY_HIGH = 0xa0010000,
    D3D12_RESIDENCY_PRIORITY_MAXIMUM = 0xc8000000,
}}

RIDL!{#[uuid(0x77acce80, 0x638e, 0x4e65, 0x88, 0x95, 0xc1, 0xf2, 0x33, 0x86, 0x86, 0x3e)]
interface ID3D12Device1(ID3D12Device1Vtbl): ID3D12Device(ID3D12DeviceVtbl) {
    fn CreatePipelineLibrary(
        pLibraryBlob: *mut c_void,
        BlobLength: ULONG_PTR,
        riid: *const GUID,
        ppPipelineLibrary: *mut *mut c_void,
    ) -> HRESULT,
    fn SetEventOnMultipleFenceCompletion(
        ppFences: *mut *mut ID3D12Fence,
        pFenceValues: *mut u64,
        NumFences: UINT,
        Flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        hEvent: *mut c_void,
    ) -> HRESULT,
    fn SetResidencyPriority(
        NumObjects: UINT,
        ppObjects: *mut *mut ID3D12Pageable,
        pPriorities: *mut D3D12_RESIDENCY_PRIORITY,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x30baa41e, 0xb15b, 0x475c, 0xa0, 0xbb, 0x1a, 0xf5, 0xc5, 0xb6, 0x43, 0x28)]
interface ID3D12Device2(ID3D12Device2Vtbl): ID3D12Device1(ID3D12Device1Vtbl) {
    fn CreatePipelineState(
        pDesc: *const D3D12_PIPELINE_STATE_STREAM_DESC,
        riid: *const GUID,
        ppPipelineState: *mut *mut c_void,
    ) -> HRESULT,
}}

ENUM!{enum D3D12_RESIDENCY_FLAGS {
    D3D12_RESIDENCY_FLAG_NONE = 0,
    D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1,
}}

RIDL!{#[uuid(0x81dadc15, 0x2bad, 0x4392, 0x93, 0xc5, 0x10, 0x13, 0x45, 0xc4, 0xaa, 0x98)]
interface ID3D12Device3(ID3D12Device3Vtbl): ID3D12Device2(ID3D12Device2Vtbl) {
    fn OpenExistingHeapFromAddress(
        pAddress: *mut c_void,
        riid: *const GUID,
        ppvHeap: *mut *mut c_void,
    ) -> HRESULT,
    fn OpenExistingHeapFromFileMapping(
        hFileMapping: *mut c_void,
        riid: *const GUID,
        ppvHeap: *mut *mut c_void,
    ) -> HRESULT,
    fn EnqueueMakeResident(
        Flags: D3D12_RESIDENCY_FLAGS,
        NumObjects: UINT,
        ppObjects: *mut *mut ID3D12Pageable,
        pFenceToSignal: *mut ID3D12Fence,
        FenceValueToSignal: u64,
    ) -> HRESULT,
}}

ENUM!{enum D3D12_COMMAND_LIST_FLAGS {
    D3D12_COMMAND_LIST_FLAG_NONE = 0,
}}

ENUM!{enum D3D12_COMMAND_POOL_FLAGS {
    D3D12_COMMAND_POOL_FLAG_NONE = 0,
}}

ENUM!{enum D3D12_COMMAND_RECORDER_FLAGS {
    D3D12_COMMAND_RECORDER_FLAG_NONE = 0,
}}

ENUM!{enum D3D12_PROTECTED_SESSION_STATUS {
    D3D12_PROTECTED_SESSION_STATUS_OK = 0,
    D3D12_PROTECTED_SESSION_STATUS_INVALID = 1,
}}

RIDL!{#[uuid(0xa1533d18, 0x0ac1, 0x4084, 0x85, 0xb9, 0x89, 0xa9, 0x61, 0x16, 0x80, 0x6b)]
interface ID3D12ProtectedSession(ID3D12ProtectedSessionVtbl): ID3D12DeviceChild(ID3D12DeviceChildVtbl) {
    fn GetStatusFence(
        riid: *const GUID,
        ppFence: *mut *mut c_void,
    ) -> HRESULT,
    fn GetSessionStatus(
    ) -> D3D12_PROTECTED_SESSION_STATUS,
}}

ENUM!{enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS {
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0,
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1,
}}

STRUCT!{struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
    NodeIndex: UINT,
    Support: D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS,
}}

ENUM!{enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS {
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0,
}}

STRUCT!{struct D3D12_PROTECTED_RESOURCE_SESSION_DESC {
    NodeMask: UINT,
    Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS,
}}

RIDL!{#[uuid(0x6cd696f4, 0xf289, 0x40cc, 0x80, 0x91, 0x5a, 0x6c, 0x0a, 0x09, 0x9c, 0x3d)]
interface ID3D12ProtectedResourceSession(ID3D12ProtectedResourceSessionVtbl): ID3D12ProtectedSession(ID3D12ProtectedSessionVtbl) {
    fn GetDesc(
    ) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC,
}}

RIDL!{#[uuid(0xe865df17, 0xa9ee, 0x46f9, 0xa4, 0x63, 0x30, 0x98, 0x31, 0x5a, 0xa2, 0xe5)]
interface ID3D12Device4(ID3D12Device4Vtbl): ID3D12Device3(ID3D12Device3Vtbl) {
    fn CreateCommandList1(
        NodeMask: UINT,
        Type: D3D12_COMMAND_LIST_TYPE,
        Flags: D3D12_COMMAND_LIST_FLAGS,
        riid: *const GUID,
        ppCommandList: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateProtectedResourceSession(
        pDesc: *mut D3D12_PROTECTED_RESOURCE_SESSION_DESC,
        riid: *mut GUID,
        ppSession: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateCommittedResource1(
        pHeapProperties: *mut D3D12_HEAP_PROPERTIES,
        HeapFlags: D3D12_HEAP_FLAGS,
        pDesc: *mut D3D12_RESOURCE_DESC,
        InitialResourceState: D3D12_RESOURCE_STATES,
        pOptimizedClearValue: *mut D3D12_CLEAR_VALUE,
        pProtectedSession: *mut ID3D12ProtectedResourceSession,
        riidResource: *const GUID,
        ppvResource: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateHeap1(
        pDesc: *mut D3D12_HEAP_DESC,
        pProtectedSession: *mut ID3D12ProtectedResourceSession,
        riid: *const GUID,
        ppvHeap: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateReservedResource1(
        pDesc: *mut D3D12_RESOURCE_DESC,
        InitialState: D3D12_RESOURCE_STATES,
        pOptimizedClearValue: *mut D3D12_CLEAR_VALUE,
        pProtectedSession: *mut ID3D12ProtectedResourceSession,
        riid: *const GUID,
        ppvResource: *mut *mut c_void,
    ) -> HRESULT,
    fn GetResourceAllocationInfo1(
        visibleMask: UINT,
        numResourceDescs: UINT,
        pResourceDescs: *mut D3D12_RESOURCE_DESC,
        pResourceAllocationInfo1: *mut D3D12_RESOURCE_ALLOCATION_INFO1,
    ) -> D3D12_RESOURCE_ALLOCATION_INFO,
}}

ENUM!{enum D3D12_LIFETIME_STATE {
    D3D12_LIFETIME_STATE_IN_USE = 0,
    D3D12_LIFETIME_STATE_NOT_IN_USE = 1,
}}

RIDL!{#[uuid(0x3fd03d36, 0x4eb1, 0x424a, 0xa5, 0x82, 0x49, 0x4e, 0xcb, 0x8b, 0xa8, 0x13)]
interface ID3D12LifetimeTracker(ID3D12LifetimeTrackerVtbl): ID3D12DeviceChild(ID3D12DeviceChildVtbl) {
    fn DestroyOwnedObject(
        pObject: *mut ID3D12DeviceChild,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xe667af9f, 0xcd56, 0x4f46, 0x83, 0xce, 0x03, 0x2e, 0x59, 0x5d, 0x70, 0xa8)]
interface ID3D12LifetimeOwner(ID3D12LifetimeOwnerVtbl): IUnknown(IUnknownVtbl) {
    fn LifetimeStateUpdated(
        NewState: D3D12_LIFETIME_STATE,
    ) -> c_void,
}}

RIDL!{#[uuid(0xf1df64b6, 0x57fd, 0x49cd, 0x88, 0x07, 0xc0, 0xeb, 0x88, 0xb4, 0x5c, 0x8f)]
interface ID3D12SwapChainAssistant(ID3D12SwapChainAssistantVtbl): IUnknown(IUnknownVtbl) {
    fn GetLUID(
    ) -> __LUID,
    fn GetSwapChainObject(
        riid: *mut GUID,
        ppv: *mut *mut c_void,
    ) -> HRESULT,
    fn GetCurrentResourceAndCommandQueue(
        riidResource: *mut GUID,
        ppvResource: *mut *mut c_void,
        riidQueue: *mut GUID,
        ppvQueue: *mut *mut c_void,
    ) -> HRESULT,
    fn InsertImplicitSync(
    ) -> HRESULT,
}}

ENUM!{enum D3D12_META_COMMAND_PARAMETER_TYPE {
    D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0,
    D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1,
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2,
    D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3,
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4,
}}

ENUM!{enum D3D12_META_COMMAND_PARAMETER_FLAGS {
    D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1,
    D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2,
}}

ENUM!{enum D3D12_META_COMMAND_PARAMETER_STAGE {
    D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0,
    D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
    D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2,
}}

STRUCT!{struct D3D12_META_COMMAND_PARAMETER_DESC {
    Name: LPCWSTR,
    Type: D3D12_META_COMMAND_PARAMETER_TYPE,
    Flags: D3D12_META_COMMAND_PARAMETER_FLAGS,
    RequiredResourceState: D3D12_RESOURCE_STATES,
    StructureOffset: UINT,
}}

ENUM!{enum D3D12_GRAPHICS_STATES {
    D3D12_GRAPHICS_STATE_NONE = 0,
    D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1,
    D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2,
    D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4,
    D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8,
    D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16,
    D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32,
    D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64,
    D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128,
    D3D12_GRAPHICS_STATE_PREDICATION = 256,
    D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512,
    D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024,
    D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048,
    D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096,
    D3D12_GRAPHICS_STATE_SO_TARGETS = 8192,
    D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384,
    D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768,
    D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536,
}}

STRUCT!{struct D3D12_META_COMMAND_DESC {
    Id: GUID,
    Name: LPCWSTR,
    InitializationDirtyState: D3D12_GRAPHICS_STATES,
    ExecutionDirtyState: D3D12_GRAPHICS_STATES,
}}

RIDL!{#[uuid(0x47016943, 0xfca8, 0x4594, 0x93, 0xea, 0xaf, 0x25, 0x8b, 0x55, 0x34, 0x6d)]
interface ID3D12StateObject(ID3D12StateObjectVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
}}

RIDL!{#[uuid(0xde5fa827, 0x9bf9, 0x4f26, 0x89, 0xff, 0xd7, 0xf5, 0x6f, 0xde, 0x38, 0x60)]
interface ID3D12StateObjectProperties(ID3D12StateObjectPropertiesVtbl): IUnknown(IUnknownVtbl) {
    fn GetShaderIdentifier(
        pExportName: LPCWSTR,
    ) -> *mut c_void,
    fn GetShaderStackSize(
        pExportName: LPCWSTR,
    ) -> u64,
    fn GetPipelineStackSize(
    ) -> u64,
    fn SetPipelineStackSize(
        PipelineStackSizeInBytes: u64,
    ) -> c_void,
}}

ENUM!{enum D3D12_STATE_SUBOBJECT_TYPE {
    D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0,
    D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1,
    D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2,
    D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3,
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5,
    D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6,
    D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7,
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10,
    D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11,
    D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 12,
}}

STRUCT!{struct D3D12_STATE_SUBOBJECT {
    Type: D3D12_STATE_SUBOBJECT_TYPE,
    pDesc: *mut c_void,
}}

ENUM!{enum D3D12_STATE_OBJECT_FLAGS {
    D3D12_STATE_OBJECT_FLAG_NONE = 0,
    D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1,
    D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2,
}}

STRUCT!{struct D3D12_STATE_OBJECT_CONFIG {
    Flags: D3D12_STATE_OBJECT_FLAGS,
}}

STRUCT!{struct D3D12_GLOBAL_ROOT_SIGNATURE {
    pGlobalRootSignature: *mut ID3D12RootSignature,
}}

STRUCT!{struct D3D12_LOCAL_ROOT_SIGNATURE {
    pLocalRootSignature: *mut ID3D12RootSignature,
}}

STRUCT!{struct D3D12_NODE_MASK {
    NodeMask: UINT,
}}

ENUM!{enum D3D12_EXPORT_FLAGS {
    D3D12_EXPORT_FLAG_NONE = 0,
}}

STRUCT!{struct D3D12_EXPORT_DESC {
    Name: LPCWSTR,
    ExportToRename: LPCWSTR,
    Flags: D3D12_EXPORT_FLAGS,
}}

STRUCT!{struct D3D12_DXIL_LIBRARY_DESC {
    DXILLibrary: D3D12_SHADER_BYTECODE,
    NumExports: UINT,
    pExports: *mut D3D12_EXPORT_DESC,
}}

STRUCT!{struct D3D12_EXISTING_COLLECTION_DESC {
    pExistingCollection: *mut ID3D12StateObject,
    NumExports: UINT,
    pExports: *mut D3D12_EXPORT_DESC,
}}

STRUCT!{struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    pSubobjectToAssociate: *mut D3D12_STATE_SUBOBJECT,
    NumExports: UINT,
    pExports: *mut LPCWSTR,
}}

STRUCT!{struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
    SubobjectToAssociate: LPCWSTR,
    NumExports: UINT,
    pExports: *mut LPCWSTR,
}}

ENUM!{enum D3D12_HIT_GROUP_TYPE {
    D3D12_HIT_GROUP_TYPE_TRIANGLES = 0,
    D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1,
}}

STRUCT!{struct D3D12_HIT_GROUP_DESC {
    HitGroupExport: LPCWSTR,
    Type: D3D12_HIT_GROUP_TYPE,
    AnyHitShaderImport: LPCWSTR,
    ClosestHitShaderImport: LPCWSTR,
    IntersectionShaderImport: LPCWSTR,
}}

STRUCT!{struct D3D12_RAYTRACING_SHADER_CONFIG {
    MaxPayloadSizeInBytes: UINT,
    MaxAttributeSizeInBytes: UINT,
}}

STRUCT!{struct D3D12_RAYTRACING_PIPELINE_CONFIG {
    MaxTraceRecursionDepth: UINT,
}}

ENUM!{enum D3D12_STATE_OBJECT_TYPE {
    D3D12_STATE_OBJECT_TYPE_COLLECTION = 0,
    D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3,
}}

STRUCT!{struct D3D12_STATE_OBJECT_DESC {
    Type: D3D12_STATE_OBJECT_TYPE,
    NumSubobjects: UINT,
    pSubobjects: *mut D3D12_STATE_SUBOBJECT,
}}

ENUM!{enum D3D12_RAYTRACING_GEOMETRY_FLAGS {
    D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0,
    D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1,
    D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2,
}}

ENUM!{enum D3D12_RAYTRACING_GEOMETRY_TYPE {
    D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0,
    D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1,
}}

ENUM!{enum D3D12_RAYTRACING_INSTANCE_FLAGS {
    D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0,
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1,
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2,
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4,
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8,
}}

STRUCT!{struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
    StartAddress: u64,
    StrideInBytes: u64,
}}

STRUCT!{struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
    StartAddress: u64,
    SizeInBytes: u64,
}}

STRUCT!{struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
    StartAddress: u64,
    SizeInBytes: u64,
    StrideInBytes: u64,
}}

STRUCT!{struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
    Transform3x4: u64,
    IndexFormat: DXGI_FORMAT,
    VertexFormat: DXGI_FORMAT,
    IndexCount: UINT,
    VertexCount: UINT,
    IndexBuffer: u64,
    VertexBuffer: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
}}

STRUCT!{struct D3D12_RAYTRACING_AABB {
    MinX: f32,
    MinY: f32,
    MinZ: f32,
    MaxX: f32,
    MaxY: f32,
    MaxZ: f32,
}}

STRUCT!{struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
    AABBCount: u64,
    AABBs: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE,
}}

ENUM!{enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS {
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32,
}}

ENUM!{enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE {
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4,
}}

ENUM!{enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE {
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1,
}}

ENUM!{enum D3D12_ELEMENTS_LAYOUT {
    D3D12_ELEMENTS_LAYOUT_ARRAY = 0,
    D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1,
}}

ENUM!{enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE {
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
    DestBuffer: u64,
    InfoType: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC {
    CompactedSizeInBytes: u64,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC {
    DecodedSizeInBytes: u64,
}}

STRUCT!{struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER {
    Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    NumDescs: UINT,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC {
    SerializedSizeInBytes: u64,
    NumBottomLevelAccelerationStructurePointers: u64,
}}

STRUCT!{struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
    DriverOpaqueGUID: GUID,
    DriverOpaqueVersioningData: [u8; 16],
}}

ENUM!{enum D3D12_SERIALIZED_DATA_TYPE {
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0,
}}

ENUM!{enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS {
    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1,
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2,
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3,
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4,
}}

STRUCT!{struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
    DriverMatchingIdentifier: D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    SerializedSizeInBytesIncludingHeader: u64,
    DeserializedSizeInBytes: u64,
    NumBottomLevelAccelerationStructurePointersAfterHeader: u64,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC {
    CurrentSizeInBytes: u64,
}}

STRUCT!{struct D3D12_RAYTRACING_INSTANCE_DESC {
    Transform: [[f32; 3]; 4],
    AccelerationStructure: u64,
}}

STRUCT!{struct D3D12_RAYTRACING_GEOMETRY_DESC {
    Type: D3D12_RAYTRACING_GEOMETRY_TYPE,
    Flags: D3D12_RAYTRACING_GEOMETRY_FLAGS,
    __MIDL____MIDL_itf_d3d12_0001_00330000: __MIDL___MIDL_itf_d3d12_0001_0033_0001,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0033_0001 {
    [u64; 6],
    Triangles Triangles_mut: D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC,
    AABBs AABBs_mut: D3D12_RAYTRACING_GEOMETRY_AABBS_DESC,
}}

STRUCT!{struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS {
    Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE,
    Flags: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS,
    NumDescs: UINT,
    DescsLayout: D3D12_ELEMENTS_LAYOUT,
    __MIDL____MIDL_itf_d3d12_0001_00330001: __MIDL___MIDL_itf_d3d12_0001_0033_0002,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0033_0002 {
    u64,
    InstanceDescs InstanceDescs_mut: u64,
    pGeometryDescs pGeometryDescs_mut: *mut D3D12_RAYTRACING_GEOMETRY_DESC,
    ppGeometryDescs ppGeometryDescs_mut: *mut *mut D3D12_RAYTRACING_GEOMETRY_DESC,
}}

STRUCT!{struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
    DestAccelerationStructureData: u64,
    Inputs: D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
    SourceAccelerationStructureData: u64,
    ScratchAccelerationStructureData: u64,
}}

STRUCT!{struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
    ResultDataMaxSizeInBytes: u64,
    ScratchDataSizeInBytes: u64,
    UpdateScratchDataSizeInBytes: u64,
}}

ENUM!{enum D3D12_RAY_FLAGS {
    D3D12_RAY_FLAG_NONE = 0,
    D3D12_RAY_FLAG_FORCE_OPAQUE = 1,
    D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2,
    D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4,
    D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8,
    D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16,
    D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32,
    D3D12_RAY_FLAG_CULL_OPAQUE = 64,
    D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128,
}}

ENUM!{enum D3D12_HIT_KIND {
    D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254,
    D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255,
}}

RIDL!{#[uuid(0x8b4f173b, 0x2fea, 0x4b80, 0x8f, 0x58, 0x43, 0x07, 0x19, 0x1a, 0xb9, 0x5d)]
interface ID3D12Device5(ID3D12Device5Vtbl): ID3D12Device4(ID3D12Device4Vtbl) {
    fn CreateLifetimeTracker(
        pOwner: *mut ID3D12LifetimeOwner,
        riid: *const GUID,
        ppvTracker: *mut *mut c_void,
    ) -> HRESULT,
    fn RemoveDevice(
    ) -> c_void,
    fn EnumerateMetaCommands(
        pNumMetaCommands: *mut UINT,
        pDescs: *mut D3D12_META_COMMAND_DESC,
    ) -> HRESULT,
    fn EnumerateMetaCommandParameters(
        CommandId: *mut GUID,
        Stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        pTotalStructureSizeInBytes: *mut UINT,
        pParameterCount: *mut UINT,
        pParameterDescs: *mut D3D12_META_COMMAND_PARAMETER_DESC,
    ) -> HRESULT,
    fn CreateMetaCommand(
        CommandId: *mut GUID,
        NodeMask: UINT,
        pCreationParametersData: *mut c_void,
        CreationParametersDataSizeInBytes: ULONG_PTR,
        riid: *const GUID,
        ppMetaCommand: *mut *mut c_void,
    ) -> HRESULT,
    fn CreateStateObject(
        pDesc: *const D3D12_STATE_OBJECT_DESC,
        riid: *const GUID,
        ppStateObject: *mut *mut c_void,
    ) -> HRESULT,
    fn GetRaytracingAccelerationStructurePrebuildInfo(
        pDesc: *mut D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS,
        pInfo: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO,
    ) -> c_void,
    fn CheckDriverMatchingIdentifier(
        SerializedDataType: D3D12_SERIALIZED_DATA_TYPE,
        pIdentifierToCheck: *mut D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER,
    ) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS,
}}

ENUM!{enum D3D12_AUTO_BREADCRUMB_OP {
    D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0,
    D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1,
    D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2,
    D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3,
    D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6,
    D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7,
    D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8,
    D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9,
    D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11,
    D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12,
    D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13,
    D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14,
    D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16,
    D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18,
    D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19,
    D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21,
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22,
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23,
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25,
    D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27,
    D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29,
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30,
    D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31,
    D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32,
    D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34,
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36,
    D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38,
    D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39,
}}

STRUCT!{struct D3D12_AUTO_BREADCRUMB_NODE {
    pCommandListDebugNameA: *mut i8,
    pCommandListDebugNameW: *mut u16,
    pCommandQueueDebugNameA: *mut i8,
    pCommandQueueDebugNameW: *mut u16,
    pCommandList: *mut ID3D12GraphicsCommandList,
    pCommandQueue: *mut ID3D12CommandQueue,
    BreadcrumbCount: UINT,
    pLastBreadcrumbValue: *mut UINT,
    pCommandHistory: *mut D3D12_AUTO_BREADCRUMB_OP,
    pNext: *mut D3D12_AUTO_BREADCRUMB_NODE,
}}

ENUM!{enum D3D12_DRED_VERSION {
    D3D12_DRED_VERSION_1_0 = 1,
}}

ENUM!{enum D3D12_DRED_FLAGS {
    D3D12_DRED_FLAG_NONE = 0,
    D3D12_DRED_FLAG_FORCE_ENABLE = 1,
    D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2,
}}

STRUCT!{struct D3D12_DEVICE_REMOVED_EXTENDED_DATA {
    Flags: D3D12_DRED_FLAGS,
    pHeadAutoBreadcrumbNode: *mut D3D12_AUTO_BREADCRUMB_NODE,
}}

STRUCT!{struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA {
    Version: D3D12_DRED_VERSION,
    __MIDL____MIDL_itf_d3d12_0001_00340000: __MIDL___MIDL_itf_d3d12_0001_0034_0001,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0034_0001 {
    [u64; 2],
    Dred_1_0 Dred_1_0_mut: D3D12_DEVICE_REMOVED_EXTENDED_DATA,
}}

RIDL!{#[uuid(0x9d5e227a, 0x4430, 0x4161, 0x88, 0xb3, 0x3e, 0xca, 0x6b, 0xb1, 0x6e, 0x19)]
interface ID3D12Resource1(ID3D12Resource1Vtbl): ID3D12Resource(ID3D12ResourceVtbl) {
    fn GetProtectedResourceSession(
        riid: *const GUID,
        ppProtectedSession: *mut *mut c_void,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x572f7389, 0x2168, 0x49e3, 0x96, 0x93, 0xd6, 0xdf, 0x58, 0x71, 0xbf, 0x6d)]
interface ID3D12Heap1(ID3D12Heap1Vtbl): ID3D12Heap(ID3D12HeapVtbl) {
    fn GetProtectedResourceSession(
        riid: *const GUID,
        ppProtectedSession: *mut *mut c_void,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x6fda83a7, 0xb84c, 0x4e38, 0x9a, 0xc8, 0xc7, 0xbd, 0x22, 0x01, 0x6b, 0x3d)]
interface ID3D12GraphicsCommandList3(ID3D12GraphicsCommandList3Vtbl): ID3D12GraphicsCommandList2(ID3D12GraphicsCommandList2Vtbl) {
    fn SetProtectedResourceSession(
        pProtectedResourceSession: *mut ID3D12ProtectedResourceSession,
    ) -> c_void,
}}

ENUM!{enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE {
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3,
}}

STRUCT!{struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
    ClearValue: D3D12_CLEAR_VALUE,
}}

STRUCT!{struct D3D12_RENDER_PASS_BEGINNING_ACCESS {
    Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE,
    __MIDL____MIDL_itf_d3d12_0001_00370000: __MIDL___MIDL_itf_d3d12_0001_0037_0001,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0037_0001 {
    [u32; 5],
    Clear Clear_mut: D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS,
}}

ENUM!{enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE {
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3,
}}

STRUCT!{struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
    SrcSubresource: UINT,
    DstSubresource: UINT,
    DstX: UINT,
    DstY: UINT,
    SrcRect: tagRECT,
}}

STRUCT!{struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
    pSrcResource: *mut ID3D12Resource,
    pDstResource: *mut ID3D12Resource,
    SubresourceCount: UINT,
    pSubresourceParameters: *mut D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS,
    Format: DXGI_FORMAT,
    ResolveMode: D3D12_RESOLVE_MODE,
    PreserveResolveSource: i32,
}}

STRUCT!{struct D3D12_RENDER_PASS_ENDING_ACCESS {
    Type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE,
    __MIDL____MIDL_itf_d3d12_0001_00370001: __MIDL___MIDL_itf_d3d12_0001_0037_0002,
}}

UNION2!{union __MIDL___MIDL_itf_d3d12_0001_0037_0002 {
    [u64; 6],
    Resolve Resolve_mut: D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS,
}}

STRUCT!{struct D3D12_RENDER_PASS_RENDER_TARGET_DESC {
    cpuDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    BeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    EndingAccess: D3D12_RENDER_PASS_ENDING_ACCESS,
}}

STRUCT!{struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
    cpuDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE,
    DepthBeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    StencilBeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS,
    DepthEndingAccess: D3D12_RENDER_PASS_ENDING_ACCESS,
    StencilEndingAccess: D3D12_RENDER_PASS_ENDING_ACCESS,
}}

ENUM!{enum D3D12_RENDER_PASS_FLAGS {
    D3D12_RENDER_PASS_FLAG_NONE = 0,
    D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1,
    D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2,
    D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4,
}}

RIDL!{#[uuid(0xdbb84c27, 0x36ce, 0x4fc9, 0xb8, 0x01, 0xf0, 0x48, 0xc4, 0x6a, 0xc5, 0x70)]
interface ID3D12MetaCommand(ID3D12MetaCommandVtbl): ID3D12Pageable(ID3D12PageableVtbl) {
    fn GetRequiredParameterResourceSize(
        Stage: D3D12_META_COMMAND_PARAMETER_STAGE,
        ParameterIndex: UINT,
    ) -> u64,
}}

STRUCT!{struct D3D12_DISPATCH_RAYS_DESC {
    RayGenerationShaderRecord: D3D12_GPU_VIRTUAL_ADDRESS_RANGE,
    MissShaderTable: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    HitGroupTable: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    CallableShaderTable: D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE,
    Width: UINT,
    Height: UINT,
    Depth: UINT,
}}

RIDL!{#[uuid(0x8754318e, 0xd3a9, 0x4541, 0x98, 0xcf, 0x64, 0x5b, 0x50, 0xdc, 0x48, 0x74)]
interface ID3D12GraphicsCommandList4(ID3D12GraphicsCommandList4Vtbl): ID3D12GraphicsCommandList3(ID3D12GraphicsCommandList3Vtbl) {
    fn BeginRenderPass(
        NumRenderTargets: UINT,
        pRenderTargets: *mut D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        pDepthStencil: *mut D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        Flags: D3D12_RENDER_PASS_FLAGS,
    ) -> c_void,
    fn EndRenderPass(
    ) -> c_void,
    fn InitializeMetaCommand(
        pMetaCommand: *mut ID3D12MetaCommand,
        pInitializationParametersData: *mut c_void,
        InitializationParametersDataSizeInBytes: ULONG_PTR,
    ) -> c_void,
    fn ExecuteMetaCommand(
        pMetaCommand: *mut ID3D12MetaCommand,
        pExecutionParametersData: *mut c_void,
        ExecutionParametersDataSizeInBytes: ULONG_PTR,
    ) -> c_void,
    fn BuildRaytracingAccelerationStructure(
        pDesc: *mut D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC,
        NumPostbuildInfoDescs: UINT,
        pPostbuildInfoDescs: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
    ) -> c_void,
    fn EmitRaytracingAccelerationStructurePostbuildInfo(
        pDesc: *mut D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC,
        NumSourceAccelerationStructures: UINT,
        pSourceAccelerationStructureData: *mut u64,
    ) -> c_void,
    fn CopyRaytracingAccelerationStructure(
        DestAccelerationStructureData: u64,
        SourceAccelerationStructureData: u64,
        Mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE,
    ) -> c_void,
    fn SetPipelineState1(
        pStateObject: *mut ID3D12StateObject,
    ) -> c_void,
    fn DispatchRays(
        pDesc: *mut D3D12_DISPATCH_RAYS_DESC,
    ) -> c_void,
}}

RIDL!{#[uuid(0x7071e1f0, 0xe84b, 0x4b33, 0x97, 0x4f, 0x12, 0xfa, 0x49, 0xde, 0x65, 0xc5)]
interface ID3D12Tools(ID3D12ToolsVtbl): IUnknown(IUnknownVtbl) {
    fn EnableShaderInstrumentation(
        bEnable: i32,
    ) -> c_void,
    fn ShaderInstrumentationEnabled(
    ) -> i32,
}}

STRUCT!{struct D3D12_SUBRESOURCE_DATA {
    pData: *mut c_void,
    RowPitch: LONG_PTR,
    SlicePitch: LONG_PTR,
}}

pub type LONG_PTR = i64;

STRUCT!{struct D3D12_MEMCPY_DEST {
    pData: *mut c_void,
    RowPitch: ULONG_PTR,
    SlicePitch: ULONG_PTR,
}}
